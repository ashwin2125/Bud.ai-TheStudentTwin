"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendMessageToTeamsChannel = void 0;
const adaptive_expressions_1 = require("adaptive-expressions");
const botbuilder_1 = require("botbuilder");
const botbuilder_dialogs_1 = require("botbuilder-dialogs");
const botframework_connector_1 = require("botframework-connector");
const converters_1 = require("botbuilder-dialogs-adaptive/lib/converters");
const actionHelpers_1 = require("./actionHelpers");
/**
 * Calls TeamsInfo.GetTeamDetails and sets the result to a memory property.
 */
class SendMessageToTeamsChannel extends botbuilder_dialogs_1.Dialog {
    constructor() {
        super(...arguments);
        /**
         * Gets or sets the expression to get the value to use for team id.
         *
         * @default
         * =turn.activity.channelData.channel.id
         */
        this.teamsChannelId = new adaptive_expressions_1.StringExpression('=turn.activity.channelData.channel.id');
    }
    getConverter(property) {
        switch (property) {
            case 'disabled':
                return new adaptive_expressions_1.BoolExpressionConverter();
            case 'conversationReferenceProperty':
            case 'activityIdProperty':
            case 'teamsChannelId':
                return new adaptive_expressions_1.StringExpressionConverter();
            case 'activity':
                return new converters_1.ActivityTemplateConverter();
            default:
                return super.getConverter(property);
        }
    }
    /**
     * Called when the dialog is started and pushed onto the dialog stack.
     *
     * @param {DialogContext} dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param {object} _options Optional, initial information to pass to the dialog.
     * @returns {Promise<DialogTurnResult>} A promise representing the asynchronous operation.
     */
    beginDialog(dc, _options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.disabled) === null || _a === void 0 ? void 0 : _a.getValue(dc.state)) {
                return dc.endDialog();
            }
            if (dc.context.activity.channelId !== botbuilder_1.Channels.Msteams) {
                throw new Error(`${SendMessageToTeamsChannel.$kind} works only on the Teams channel.`);
            }
            const activity = yield ((_b = this.activity) === null || _b === void 0 ? void 0 : _b.bind(dc, dc.state));
            if (!activity) {
                throw new Error(`Missing Activity in ${SendMessageToTeamsChannel.$kind}.`);
            }
            const teamsChannelId = (_c = (0, actionHelpers_1.getValue)(dc, this.teamsChannelId)) !== null && _c !== void 0 ? _c : (_f = (_e = (_d = dc.context) === null || _d === void 0 ? void 0 : _d.activity.channelData) === null || _e === void 0 ? void 0 : _e.channel) === null || _f === void 0 ? void 0 : _f.id;
            let result;
            // Check for legacy adapter
            if ((0, actionHelpers_1.testAdapterHasCreateConnectorClientMethod)(dc.context.adapter)) {
                const credentials = (_g = dc.context.turnState.get(dc.context.adapter.ConnectorClientKey)) === null || _g === void 0 ? void 0 : _g.credentials;
                if (!credentials) {
                    throw new Error('Missing credentials as MicrosoftAppCredentials in ConnectorClient from TurnState');
                }
                result = yield botbuilder_1.TeamsInfo.sendMessageToTeamsChannel(dc.context, activity, teamsChannelId);
            }
            else if (dc.context.adapter instanceof botbuilder_1.CloudAdapterBase) {
                const botIdentity = dc.context.turnState.get(dc.context.adapter.BotIdentityKey);
                let appId;
                if (botIdentity) {
                    // 'version' is sometimes empty, which will result in no id returned from GetAppIdFromClaims.
                    appId = botframework_connector_1.JwtTokenValidation.getAppIdFromClaims(botIdentity.claims);
                    if (!appId) {
                        appId = (_h = botIdentity.claims.find((claim) => claim.type === botframework_connector_1.AuthenticationConstants.AudienceClaim)) === null || _h === void 0 ? void 0 : _h.value;
                    }
                    if (!appId) {
                        throw new Error('Missing AppIdClaim in ClaimsIdentity');
                    }
                }
                else {
                    throw new Error('Missing dc.context.adapter.BotIdentityKey in TurnContext TurnState');
                }
                result = yield botbuilder_1.TeamsInfo.sendMessageToTeamsChannel(dc.context, activity, teamsChannelId, appId);
            }
            else {
                throw new Error('The adapter does not support SendMessageToTeamsChannel');
            }
            if (this.conversationReferenceProperty != null) {
                dc.state.setValue((_j = this.conversationReferenceProperty) === null || _j === void 0 ? void 0 : _j.getValue(dc.state), result[0]);
            }
            if (this.activityIdProperty != null) {
                dc.state.setValue((_k = this.activityIdProperty) === null || _k === void 0 ? void 0 : _k.getValue(dc.state), result[1]);
            }
            return dc.endDialog(result);
        });
    }
    /**
     * Builds the compute Id for the dialog.
     *
     * @returns {string} A string representing the compute Id.
     */
    onComputeId() {
        var _a, _b, _c, _d, _e, _f;
        return `SendMessageToTeamsChannel[\
            ${(_b = (_a = this.teamsChannelId) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''},\
            ${(_d = (_c = this.activityIdProperty) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''},\
            ${(_f = (_e = this.conversationReferenceProperty) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : ''}\
        ]`;
    }
}
exports.SendMessageToTeamsChannel = SendMessageToTeamsChannel;
/**
 * Class identifier.
 */
SendMessageToTeamsChannel.$kind = 'Teams.SendMessageToTeamsChannel';
//# sourceMappingURL=sendMessageToTeamsChannel.js.map