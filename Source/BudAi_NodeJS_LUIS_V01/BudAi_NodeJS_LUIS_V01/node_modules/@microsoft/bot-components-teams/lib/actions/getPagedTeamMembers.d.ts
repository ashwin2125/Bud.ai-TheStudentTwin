import { BoolExpression, Expression, IntExpression, StringExpression } from 'adaptive-expressions';
import { Converter, ConverterFactory, Dialog, DialogConfiguration, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
export interface GetPagedTeamMembersConfiguration extends DialogConfiguration {
    disabled?: boolean | string | BoolExpression;
    property?: string | Expression | StringExpression;
    continuationToken?: string | Expression | StringExpression;
    pageSize?: number | Expression | IntExpression;
    teamId?: string | Expression | StringExpression;
}
/**
 * Calls TeamsInfo.getPagedTeamMembers to retrieve a paginated list of members of a team.
 * Also sets the result to a memory property.
 */
export declare class GetPagedTeamMembers extends Dialog implements GetPagedTeamMembersConfiguration {
    /**
     * Class identifier.
     */
    static $kind: string;
    /**
     * Gets or sets an optional expression which if is true will disable this action.
     */
    disabled?: BoolExpression;
    /**
     * Gets or sets property path to put the value in.
     */
    property?: StringExpression;
    /**
     * Gets or sets the expression to get the value to use for the continuationToken.
     */
    continuationToken?: StringExpression;
    /**
     * Gets or sets the expression to get the value to use for the page size.
     */
    pageSize?: IntExpression;
    /**
     * Gets or sets the expression to get the value to use for team id.
     *
     * @default
     * ==turn.activity.channelData.team.id
     */
    teamId: StringExpression;
    getConverter(property: keyof GetPagedTeamMembersConfiguration): Converter | ConverterFactory;
    /**
     * Called when the dialog is started and pushed onto the dialog stack.
     *
     * @param {DialogContext} dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param {object} _options Optional, initial information to pass to the dialog.
     * @returns {Promise<DialogTurnResult>} A promise representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, _options?: Record<string, unknown>): Promise<DialogTurnResult>;
    /**
     * Builds the compute Id for the dialog.
     *
     * @returns {string} A string representing the compute Id.
     */
    protected onComputeId(): string;
}
