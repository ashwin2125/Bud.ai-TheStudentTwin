"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnTeamsMEBotMessagePreviewEdit = void 0;
const botbuilder_1 = require("botbuilder");
const adaptive_expressions_1 = require("adaptive-expressions");
const botbuilder_dialogs_adaptive_1 = require("botbuilder-dialogs-adaptive");
const botbuilder_dialogs_1 = require("botbuilder-dialogs");
/**
 * Actions triggered when a Teams InvokeActivity is received with activity.name='composeExtension/submitAction'
 * and activity.value.botMessagePreviewAction == 'edit'.
 */
class OnTeamsMEBotMessagePreviewEdit extends botbuilder_dialogs_adaptive_1.OnInvokeActivity {
    /**
     * Create expression for this condition.
     *
     * @returns {Expression} An [Expression](xref:adaptive-expressions.Expression) used to evaluate this rule.
     */
    createExpression() {
        const expressions = [
            adaptive_expressions_1.Expression.parse(`${botbuilder_dialogs_1.TurnPath.activity}.channelId == '${botbuilder_1.Channels.Msteams}' && ${botbuilder_dialogs_1.TurnPath.activity}.name == 'composeExtension/submitAction' && ` +
                `${botbuilder_dialogs_1.TurnPath.activity}.value.botMessagePreviewAction == 'edit'`),
            super.createExpression(),
        ];
        if (this.commandId) {
            expressions.push(adaptive_expressions_1.Expression.parse(`${botbuilder_dialogs_1.TurnPath.activity}.value.commandId == '${this.commandId}'`));
        }
        return adaptive_expressions_1.Expression.andExpression(...expressions);
    }
}
exports.OnTeamsMEBotMessagePreviewEdit = OnTeamsMEBotMessagePreviewEdit;
OnTeamsMEBotMessagePreviewEdit.$kind = 'Teams.OnMEBotMessagePreviewEdit';
//# sourceMappingURL=onTeamsMEBotMessagePreviewEdit.js.map