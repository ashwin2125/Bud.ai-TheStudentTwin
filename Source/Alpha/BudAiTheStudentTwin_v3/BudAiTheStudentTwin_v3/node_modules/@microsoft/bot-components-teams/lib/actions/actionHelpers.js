"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.testAdapterHasCreateConnectorClientMethod = exports.testAdapterHasAuthMethods = exports.getValue = void 0;
const botbuilder_1 = require("botbuilder");
/**
 * Get the value of the string expression from the Dialog Context.
 *
 * @param {DialogContext} dc A DialogContext object.
 * @param {ExpressionProperty<any>} expressionProperty The expressionProperty to use to retrieve a value from the DialogContext.
 * @returns {string} The value of the evaluated stringExpression.
 */
function getValue(dc, expressionProperty) {
    if (expressionProperty) {
        const { value, error } = expressionProperty.tryGetValue(dc.state);
        if (error) {
            throw new Error(`Expression evaluation resulted in an error. Expression: "${expressionProperty.expressionText}". Error: ${error}`);
        }
        return value;
    }
    return undefined;
}
exports.getValue = getValue;
/**
 * Type guard to assert val has required auth methods.
 *
 * @param {any} val Usually context.adapter.
 * @returns {Assertion} Asserts that val has required auth methods.
 */
function testAdapterHasAuthMethods(val) {
    return (val instanceof botbuilder_1.BotFrameworkAdapter ||
        (typeof val.getUserToken === 'function' &&
            typeof val.getSignInLink === 'function'));
}
exports.testAdapterHasAuthMethods = testAdapterHasAuthMethods;
/**
 * Type guard to assert val has required createConnectorClient method.
 *
 * @param {any} val Usually context.adapter.
 * @returns {Assertion} Asserts that val has required createConnectorClient method.
 */
function testAdapterHasCreateConnectorClientMethod(val) {
    return (val instanceof botbuilder_1.BotFrameworkAdapter ||
        typeof val.createConnectorClient === 'function');
}
exports.testAdapterHasCreateConnectorClientMethod = testAdapterHasCreateConnectorClientMethod;
//# sourceMappingURL=actionHelpers.js.map