"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPagedTeamMembers = void 0;
const adaptive_expressions_1 = require("adaptive-expressions");
const botbuilder_1 = require("botbuilder");
const botbuilder_dialogs_1 = require("botbuilder-dialogs");
const actionHelpers_1 = require("./actionHelpers");
/**
 * Calls TeamsInfo.getPagedTeamMembers to retrieve a paginated list of members of a team.
 * Also sets the result to a memory property.
 */
class GetPagedTeamMembers extends botbuilder_dialogs_1.Dialog {
    constructor() {
        super(...arguments);
        /**
         * Gets or sets the expression to get the value to use for team id.
         *
         * @default
         * ==turn.activity.channelData.team.id
         */
        this.teamId = new adaptive_expressions_1.StringExpression('=turn.activity.channelData.team.id');
    }
    getConverter(property) {
        switch (property) {
            case 'disabled':
                return new adaptive_expressions_1.BoolExpressionConverter();
            case 'property':
            case 'continuationToken':
            case 'teamId':
                return new adaptive_expressions_1.StringExpressionConverter();
            case 'pageSize':
                return new adaptive_expressions_1.IntExpressionConverter();
            default:
                return super.getConverter(property);
        }
    }
    /**
     * Called when the dialog is started and pushed onto the dialog stack.
     *
     * @param {DialogContext} dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param {object} _options Optional, initial information to pass to the dialog.
     * @returns {Promise<DialogTurnResult>} A promise representing the asynchronous operation.
     */
    beginDialog(dc, _options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.disabled) === null || _a === void 0 ? void 0 : _a.getValue(dc.state)) {
                return dc.endDialog();
            }
            if (dc.context.activity.channelId !== botbuilder_1.Channels.Msteams) {
                throw new Error(`${GetPagedTeamMembers.$kind} works only on the Teams channel.`);
            }
            const continuationToken = (0, actionHelpers_1.getValue)(dc, this.continuationToken);
            const pageSize = (0, actionHelpers_1.getValue)(dc, this.pageSize);
            const teamId = (0, actionHelpers_1.getValue)(dc, this.teamId);
            const result = yield botbuilder_1.TeamsInfo.getPagedTeamMembers(dc.context, teamId, pageSize, continuationToken);
            if (this.property != null) {
                dc.state.setValue((_b = this.property) === null || _b === void 0 ? void 0 : _b.getValue(dc.state), result);
            }
            return dc.endDialog(result);
        });
    }
    /**
     * Builds the compute Id for the dialog.
     *
     * @returns {string} A string representing the compute Id.
     */
    onComputeId() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return `GetPagedTeamMembers[\
            ${(_b = (_a = this.teamId) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''}],\
            ${(_d = (_c = this.pageSize) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''}],\
            ${(_f = (_e = this.continuationToken) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : ''},\
            ${(_h = (_g = this.property) === null || _g === void 0 ? void 0 : _g.toString()) !== null && _h !== void 0 ? _h : ''}\
        ]`;
    }
}
exports.GetPagedTeamMembers = GetPagedTeamMembers;
/**
 * Class identifier.
 */
GetPagedTeamMembers.$kind = 'Teams.GetPagedTeamMembers';
//# sourceMappingURL=getPagedTeamMembers.js.map