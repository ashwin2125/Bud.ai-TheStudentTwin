import { BoolExpression, Expression, StringExpression } from 'adaptive-expressions';
import { Converter, ConverterFactory, Dialog, DialogConfiguration, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
export interface GetMeetingParticipantConfiguration extends DialogConfiguration {
    disabled?: boolean | string | BoolExpression;
    property?: string | Expression | StringExpression;
    meetingId?: string | Expression | StringExpression;
    participantId?: string | Expression | StringExpression;
    tenantId?: string | Expression | StringExpression;
}
/**
 * Calls `TeamsInfo.getMeetingParticipant` and sets the result to a memory property.
 */
export declare class GetMeetingParticipant extends Dialog implements GetMeetingParticipantConfiguration {
    /**
     * Class identifier.
     */
    static $kind: string;
    /**
     * Gets or sets an optional expression which if is true will disable this action.
     *
     * @example
     * "user.age > 18".
     */
    disabled?: BoolExpression;
    /**
     * Gets or sets property path to put the value in.
     */
    property?: StringExpression;
    /**
     * Gets or sets the expression to get the value to use for meeting id.
     *
     * @default
     * =turn.activity.channelData.meeting.id
     */
    meetingId: StringExpression;
    /**
     * Gets or sets the expression to get the value to use for participant id.
     *
     * @default
     * =turn.activity.from.aadObjectId
     */
    participantId: StringExpression;
    /**
     * Gets or sets the expression to get the value to use for tenant id.
     *
     * @default
     * =turn.activity.channelData.tenant.id
     */
    tenantId: StringExpression;
    getConverter(property: keyof GetMeetingParticipantConfiguration): Converter | ConverterFactory;
    /**
     * Called when the dialog is started and pushed onto the dialog stack.
     *
     * @param {DialogContext} dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param {object} _options Optional, initial information to pass to the dialog.
     * @returns {Promise<DialogTurnResult>} A promise representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, _options?: Record<string, unknown>): Promise<DialogTurnResult>;
    /**
     * Builds the compute Id for the dialog.
     *
     * @returns {string} A string representing the compute Id.
     */
    protected onComputeId(): string;
}
