"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendTaskModuleMessageResponse = void 0;
const adaptive_expressions_1 = require("adaptive-expressions");
const botbuilder_dialogs_adaptive_1 = require("botbuilder-dialogs-adaptive");
const actionHelpers_1 = require("./actionHelpers");
const baseTeamsCacheInfoResponseDialog_1 = require("./baseTeamsCacheInfoResponseDialog");
/**
 * Send a simple message task module response.
 */
class SendTaskModuleMessageResponse extends baseTeamsCacheInfoResponseDialog_1.BaseTeamsCacheInfoResponseDialog {
    getConverter(property) {
        switch (property) {
            case 'disabled':
                return new adaptive_expressions_1.BoolExpressionConverter();
            case 'message':
                return new adaptive_expressions_1.StringExpressionConverter();
            default:
                return super.getConverter(property);
        }
    }
    /**
     * Called when the dialog is started and pushed onto the dialog stack.
     *
     * @param {DialogContext} dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param {object} _options Optional, initial information to pass to the dialog.
     * @returns {Promise<DialogTurnResult>} A promise representing the asynchronous operation.
     */
    beginDialog(dc, _options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.disabled) === null || _a === void 0 ? void 0 : _a.getValue(dc.state)) {
                return dc.endDialog();
            }
            let message = (0, actionHelpers_1.getValue)(dc, this.message);
            if (!message) {
                const languageGenerator = dc.services.get(botbuilder_dialogs_adaptive_1.languageGeneratorKey);
                if (languageGenerator) {
                    const lgStringResult = yield languageGenerator.generate(dc, message, dc.state);
                    message = lgStringResult.toString();
                }
            }
            const response = {
                task: {
                    type: 'message',
                    value: message,
                },
                cacheInfo: this.getCacheInfo(dc),
            };
            const responseActivity = baseTeamsCacheInfoResponseDialog_1.BaseTeamsCacheInfoResponseDialog.createInvokeResponseActivity(response);
            const sendResponse = yield dc.context.sendActivity(responseActivity);
            return dc.endDialog(sendResponse);
        });
    }
    /**
     * Builds the compute Id for the dialog.
     *
     * @returns {string} A string representing the compute Id.
     */
    onComputeId() {
        var _a, _b;
        return `SendTaskModuleMessageResponse[\
            ${(_b = (_a = this.message) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''}\
        ]`;
    }
}
exports.SendTaskModuleMessageResponse = SendTaskModuleMessageResponse;
/**
 * Class identifier.
 */
SendTaskModuleMessageResponse.$kind = 'Teams.SendTaskModuleMessageResponse';
//# sourceMappingURL=sendTaskModuleMessageResponse.js.map