/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { ATN } from "antlr4ts/atn/ATN";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
export declare class LGTemplateLexer extends Lexer {
    static readonly WS = 1;
    static readonly NEWLINE = 2;
    static readonly COMMENTS = 3;
    static readonly DASH = 4;
    static readonly LEFT_SQUARE_BRACKET = 5;
    static readonly INVALID_TOKEN = 6;
    static readonly WS_IN_BODY = 7;
    static readonly MULTILINE_PREFIX = 8;
    static readonly NEWLINE_IN_BODY = 9;
    static readonly IF = 10;
    static readonly ELSEIF = 11;
    static readonly ELSE = 12;
    static readonly SWITCH = 13;
    static readonly CASE = 14;
    static readonly DEFAULT = 15;
    static readonly ESCAPE_CHARACTER = 16;
    static readonly EXPRESSION = 17;
    static readonly TEXT = 18;
    static readonly MULTILINE_SUFFIX = 19;
    static readonly WS_IN_STRUCTURE_NAME = 20;
    static readonly NEWLINE_IN_STRUCTURE_NAME = 21;
    static readonly STRUCTURE_NAME = 22;
    static readonly TEXT_IN_STRUCTURE_NAME = 23;
    static readonly STRUCTURED_COMMENTS = 24;
    static readonly WS_IN_STRUCTURE_BODY = 25;
    static readonly STRUCTURED_NEWLINE = 26;
    static readonly STRUCTURED_BODY_END = 27;
    static readonly STRUCTURE_IDENTIFIER = 28;
    static readonly STRUCTURE_EQUALS = 29;
    static readonly STRUCTURE_OR_MARK = 30;
    static readonly ESCAPE_CHARACTER_IN_STRUCTURE_BODY = 31;
    static readonly EXPRESSION_IN_STRUCTURE_BODY = 32;
    static readonly TEXT_IN_STRUCTURE_BODY = 33;
    static readonly NORMAL_TEMPLATE_BODY_MODE = 1;
    static readonly MULTILINE_MODE = 2;
    static readonly STRUCTURE_NAME_MODE = 3;
    static readonly STRUCTURE_BODY_MODE = 4;
    static readonly channelNames: string[];
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    readonly vocabulary: Vocabulary;
    ignoreWS: boolean;
    beginOfTemplateBody: boolean;
    inMultiline: boolean;
    beginOfTemplateLine: boolean;
    inStructuredValue: boolean;
    beginOfStructureProperty: boolean;
    constructor(input: CharStream);
    readonly grammarFileName: string;
    readonly ruleNames: string[];
    readonly serializedATN: string;
    readonly channelNames: string[];
    readonly modeNames: string[];
    action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void;
    private DASH_action;
    private LEFT_SQUARE_BRACKET_action;
    private INVALID_TOKEN_action;
    private MULTILINE_PREFIX_action;
    private NEWLINE_IN_BODY_action;
    private IF_action;
    private ELSEIF_action;
    private ELSE_action;
    private SWITCH_action;
    private CASE_action;
    private DEFAULT_action;
    private ESCAPE_CHARACTER_action;
    private EXPRESSION_action;
    private TEXT_action;
    private MULTILINE_SUFFIX_action;
    private NEWLINE_IN_STRUCTURE_NAME_action;
    private STRUCTURED_NEWLINE_action;
    private STRUCTURE_IDENTIFIER_action;
    private STRUCTURE_EQUALS_action;
    private STRUCTURE_OR_MARK_action;
    private ESCAPE_CHARACTER_IN_STRUCTURE_BODY_action;
    private EXPRESSION_IN_STRUCTURE_BODY_action;
    private TEXT_IN_STRUCTURE_BODY_action;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private LEFT_SQUARE_BRACKET_sempred;
    private WS_IN_BODY_sempred;
    private MULTILINE_PREFIX_sempred;
    private IF_sempred;
    private ELSEIF_sempred;
    private ELSE_sempred;
    private SWITCH_sempred;
    private CASE_sempred;
    private DEFAULT_sempred;
    private STRUCTURED_COMMENTS_sempred;
    private WS_IN_STRUCTURE_BODY_sempred;
    private STRUCTURED_BODY_END_sempred;
    private STRUCTURE_IDENTIFIER_sempred;
    private STRUCTURE_EQUALS_sempred;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static readonly _ATN: ATN;
}
//# sourceMappingURL=LGTemplateLexer.d.ts.map