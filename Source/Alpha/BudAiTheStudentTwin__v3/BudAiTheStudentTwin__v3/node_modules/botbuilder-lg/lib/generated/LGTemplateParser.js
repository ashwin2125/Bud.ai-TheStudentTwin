"use strict";
// Generated from src/LGTemplateParser.g4 by ANTLR 4.7.3-SNAPSHOT
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const ATN_1 = require("antlr4ts/atn/ATN");
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const NoViableAltException_1 = require("antlr4ts/NoViableAltException");
const Parser_1 = require("antlr4ts/Parser");
const ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
const ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
const RecognitionException_1 = require("antlr4ts/RecognitionException");
const Token_1 = require("antlr4ts/Token");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = require("antlr4ts/misc/Utils");
class LGTemplateParser extends Parser_1.Parser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator_1.ParserATNSimulator(LGTemplateParser._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return LGTemplateParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "LGTemplateParser.g4"; }
    // @Override
    get ruleNames() { return LGTemplateParser.ruleNames; }
    // @Override
    get serializedATN() { return LGTemplateParser._serializedATN; }
    // @RuleVersion(0)
    template() {
        let _localctx = new TemplateContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, LGTemplateParser.RULE_template);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 44;
                this.body();
                this.state = 45;
                this.match(LGTemplateParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    body() {
        let _localctx = new BodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, LGTemplateParser.RULE_body);
        try {
            this.state = 51;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 0, this._ctx)) {
                case 1:
                    _localctx = new NormalBodyContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 47;
                        this.normalTemplateBody();
                    }
                    break;
                case 2:
                    _localctx = new IfElseBodyContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 48;
                        this.ifElseTemplateBody();
                    }
                    break;
                case 3:
                    _localctx = new SwitchCaseBodyContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 49;
                        this.switchCaseTemplateBody();
                    }
                    break;
                case 4:
                    _localctx = new StructuredBodyContext(_localctx);
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 50;
                        this.structuredTemplateBody();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    structuredTemplateBody() {
        let _localctx = new StructuredTemplateBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, LGTemplateParser.RULE_structuredTemplateBody);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 53;
                this.structuredBodyNameLine();
                this.state = 63;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & ((1 << (LGTemplateParser.STRUCTURED_NEWLINE - 26)) | (1 << (LGTemplateParser.STRUCTURE_IDENTIFIER - 26)) | (1 << (LGTemplateParser.STRUCTURE_EQUALS - 26)) | (1 << (LGTemplateParser.STRUCTURE_OR_MARK - 26)) | (1 << (LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY - 26)) | (1 << (LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY - 26)) | (1 << (LGTemplateParser.TEXT_IN_STRUCTURE_BODY - 26)))) !== 0)) {
                    {
                        this.state = 59;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 59;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {
                                    case 1:
                                        {
                                            {
                                                this.state = 55;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                if (_la === LGTemplateParser.STRUCTURE_IDENTIFIER || _la === LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY) {
                                                    {
                                                        this.state = 54;
                                                        this.structuredBodyContentLine();
                                                    }
                                                }
                                                this.state = 57;
                                                this.match(LGTemplateParser.STRUCTURED_NEWLINE);
                                            }
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 58;
                                            this.errorStructureLine();
                                        }
                                        break;
                                }
                            }
                            this.state = 61;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & ((1 << (LGTemplateParser.STRUCTURED_NEWLINE - 26)) | (1 << (LGTemplateParser.STRUCTURE_IDENTIFIER - 26)) | (1 << (LGTemplateParser.STRUCTURE_EQUALS - 26)) | (1 << (LGTemplateParser.STRUCTURE_OR_MARK - 26)) | (1 << (LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY - 26)) | (1 << (LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY - 26)) | (1 << (LGTemplateParser.TEXT_IN_STRUCTURE_BODY - 26)))) !== 0));
                    }
                }
                this.state = 66;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === LGTemplateParser.STRUCTURED_BODY_END) {
                    {
                        this.state = 65;
                        this.structuredBodyEndLine();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    structuredBodyNameLine() {
        let _localctx = new StructuredBodyNameLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, LGTemplateParser.RULE_structuredBodyNameLine);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 68;
                this.match(LGTemplateParser.LEFT_SQUARE_BRACKET);
                this.state = 71;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {
                    case 1:
                        {
                            this.state = 69;
                            this.match(LGTemplateParser.STRUCTURE_NAME);
                        }
                        break;
                    case 2:
                        {
                            this.state = 70;
                            this.errorStructuredName();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    errorStructuredName() {
        let _localctx = new ErrorStructuredNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, LGTemplateParser.RULE_errorStructuredName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 76;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === LGTemplateParser.STRUCTURE_NAME || _la === LGTemplateParser.TEXT_IN_STRUCTURE_NAME) {
                    {
                        {
                            this.state = 73;
                            _la = this._input.LA(1);
                            if (!(_la === LGTemplateParser.STRUCTURE_NAME || _la === LGTemplateParser.TEXT_IN_STRUCTURE_NAME)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    this.state = 78;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    structuredBodyContentLine() {
        let _localctx = new StructuredBodyContentLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, LGTemplateParser.RULE_structuredBodyContentLine);
        try {
            this.state = 81;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case LGTemplateParser.STRUCTURE_IDENTIFIER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 79;
                        this.keyValueStructureLine();
                    }
                    break;
                case LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 80;
                        this.expressionInStructure();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    errorStructureLine() {
        let _localctx = new ErrorStructureLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, LGTemplateParser.RULE_errorStructureLine);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 89;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                this.state = 89;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case LGTemplateParser.STRUCTURE_IDENTIFIER:
                                        {
                                            this.state = 83;
                                            this.match(LGTemplateParser.STRUCTURE_IDENTIFIER);
                                        }
                                        break;
                                    case LGTemplateParser.STRUCTURE_EQUALS:
                                        {
                                            this.state = 84;
                                            this.match(LGTemplateParser.STRUCTURE_EQUALS);
                                        }
                                        break;
                                    case LGTemplateParser.STRUCTURE_OR_MARK:
                                        {
                                            this.state = 85;
                                            this.match(LGTemplateParser.STRUCTURE_OR_MARK);
                                        }
                                        break;
                                    case LGTemplateParser.TEXT_IN_STRUCTURE_BODY:
                                        {
                                            this.state = 86;
                                            this.match(LGTemplateParser.TEXT_IN_STRUCTURE_BODY);
                                        }
                                        break;
                                    case LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY:
                                        {
                                            this.state = 87;
                                            this.expressionInStructure();
                                        }
                                        break;
                                    case LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY:
                                        {
                                            this.state = 88;
                                            this.match(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 91;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 10, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyValueStructureLine() {
        let _localctx = new KeyValueStructureLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, LGTemplateParser.RULE_keyValueStructureLine);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 93;
                this.match(LGTemplateParser.STRUCTURE_IDENTIFIER);
                this.state = 94;
                this.match(LGTemplateParser.STRUCTURE_EQUALS);
                this.state = 95;
                this.keyValueStructureValue();
                this.state = 100;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === LGTemplateParser.STRUCTURE_OR_MARK) {
                    {
                        {
                            this.state = 96;
                            this.match(LGTemplateParser.STRUCTURE_OR_MARK);
                            this.state = 97;
                            this.keyValueStructureValue();
                        }
                    }
                    this.state = 102;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyValueStructureValue() {
        let _localctx = new KeyValueStructureValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, LGTemplateParser.RULE_keyValueStructureValue);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 106;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 106;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case LGTemplateParser.TEXT_IN_STRUCTURE_BODY:
                                {
                                    this.state = 103;
                                    this.match(LGTemplateParser.TEXT_IN_STRUCTURE_BODY);
                                }
                                break;
                            case LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY:
                                {
                                    this.state = 104;
                                    this.expressionInStructure();
                                }
                                break;
                            case LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY:
                                {
                                    this.state = 105;
                                    this.match(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 108;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 31)) & ~0x1F) === 0 && ((1 << (_la - 31)) & ((1 << (LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY - 31)) | (1 << (LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY - 31)) | (1 << (LGTemplateParser.TEXT_IN_STRUCTURE_BODY - 31)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    structuredBodyEndLine() {
        let _localctx = new StructuredBodyEndLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, LGTemplateParser.RULE_structuredBodyEndLine);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 110;
                this.match(LGTemplateParser.STRUCTURED_BODY_END);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    normalTemplateBody() {
        let _localctx = new NormalTemplateBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, LGTemplateParser.RULE_normalTemplateBody);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 113;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 112;
                                    this.templateString();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 115;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    templateString() {
        let _localctx = new TemplateStringContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, LGTemplateParser.RULE_templateString);
        try {
            this.state = 119;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case LGTemplateParser.DASH:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 117;
                        this.normalTemplateString();
                    }
                    break;
                case LGTemplateParser.INVALID_TOKEN:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 118;
                        this.errorTemplateString();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    normalTemplateString() {
        let _localctx = new NormalTemplateStringContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, LGTemplateParser.RULE_normalTemplateString);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 121;
                this.match(LGTemplateParser.DASH);
                this.state = 123;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === LGTemplateParser.MULTILINE_PREFIX) {
                    {
                        this.state = 122;
                        this.match(LGTemplateParser.MULTILINE_PREFIX);
                    }
                }
                this.state = 130;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << LGTemplateParser.ESCAPE_CHARACTER) | (1 << LGTemplateParser.EXPRESSION) | (1 << LGTemplateParser.TEXT))) !== 0)) {
                    {
                        this.state = 128;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case LGTemplateParser.TEXT:
                                {
                                    this.state = 125;
                                    this.match(LGTemplateParser.TEXT);
                                }
                                break;
                            case LGTemplateParser.EXPRESSION:
                                {
                                    this.state = 126;
                                    this.expression();
                                }
                                break;
                            case LGTemplateParser.ESCAPE_CHARACTER:
                                {
                                    this.state = 127;
                                    this.match(LGTemplateParser.ESCAPE_CHARACTER);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 132;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 134;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === LGTemplateParser.MULTILINE_SUFFIX) {
                    {
                        this.state = 133;
                        this.match(LGTemplateParser.MULTILINE_SUFFIX);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    errorTemplateString() {
        let _localctx = new ErrorTemplateStringContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, LGTemplateParser.RULE_errorTemplateString);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 137;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 136;
                                    this.match(LGTemplateParser.INVALID_TOKEN);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 139;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifElseTemplateBody() {
        let _localctx = new IfElseTemplateBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, LGTemplateParser.RULE_ifElseTemplateBody);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 142;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 141;
                            this.ifConditionRule();
                        }
                    }
                    this.state = 144;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === LGTemplateParser.DASH);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifConditionRule() {
        let _localctx = new IfConditionRuleContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, LGTemplateParser.RULE_ifConditionRule);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 146;
                this.ifCondition();
                this.state = 148;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 22, this._ctx)) {
                    case 1:
                        {
                            this.state = 147;
                            this.normalTemplateBody();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifCondition() {
        let _localctx = new IfConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, LGTemplateParser.RULE_ifCondition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 150;
                this.match(LGTemplateParser.DASH);
                this.state = 151;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << LGTemplateParser.IF) | (1 << LGTemplateParser.ELSEIF) | (1 << LGTemplateParser.ELSE))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 157;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << LGTemplateParser.WS) | (1 << LGTemplateParser.EXPRESSION) | (1 << LGTemplateParser.TEXT))) !== 0)) {
                    {
                        this.state = 155;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case LGTemplateParser.WS:
                                {
                                    this.state = 152;
                                    this.match(LGTemplateParser.WS);
                                }
                                break;
                            case LGTemplateParser.TEXT:
                                {
                                    this.state = 153;
                                    this.match(LGTemplateParser.TEXT);
                                }
                                break;
                            case LGTemplateParser.EXPRESSION:
                                {
                                    this.state = 154;
                                    this.expression();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 159;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    switchCaseTemplateBody() {
        let _localctx = new SwitchCaseTemplateBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, LGTemplateParser.RULE_switchCaseTemplateBody);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 161;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 160;
                            this.switchCaseRule();
                        }
                    }
                    this.state = 163;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === LGTemplateParser.DASH);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    switchCaseRule() {
        let _localctx = new SwitchCaseRuleContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, LGTemplateParser.RULE_switchCaseRule);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 165;
                this.switchCaseStat();
                this.state = 167;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 26, this._ctx)) {
                    case 1:
                        {
                            this.state = 166;
                            this.normalTemplateBody();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    switchCaseStat() {
        let _localctx = new SwitchCaseStatContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, LGTemplateParser.RULE_switchCaseStat);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 169;
                this.match(LGTemplateParser.DASH);
                this.state = 170;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << LGTemplateParser.SWITCH) | (1 << LGTemplateParser.CASE) | (1 << LGTemplateParser.DEFAULT))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 176;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << LGTemplateParser.WS) | (1 << LGTemplateParser.EXPRESSION) | (1 << LGTemplateParser.TEXT))) !== 0)) {
                    {
                        this.state = 174;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case LGTemplateParser.WS:
                                {
                                    this.state = 171;
                                    this.match(LGTemplateParser.WS);
                                }
                                break;
                            case LGTemplateParser.TEXT:
                                {
                                    this.state = 172;
                                    this.match(LGTemplateParser.TEXT);
                                }
                                break;
                            case LGTemplateParser.EXPRESSION:
                                {
                                    this.state = 173;
                                    this.expression();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 178;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expression() {
        let _localctx = new ExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, LGTemplateParser.RULE_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 179;
                this.match(LGTemplateParser.EXPRESSION);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expressionInStructure() {
        let _localctx = new ExpressionInStructureContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, LGTemplateParser.RULE_expressionInStructure);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 181;
                this.match(LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    static get _ATN() {
        if (!LGTemplateParser.__ATN) {
            LGTemplateParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(LGTemplateParser._serializedATN));
        }
        return LGTemplateParser.__ATN;
    }
}
LGTemplateParser.WS = 1;
LGTemplateParser.NEWLINE = 2;
LGTemplateParser.COMMENTS = 3;
LGTemplateParser.DASH = 4;
LGTemplateParser.LEFT_SQUARE_BRACKET = 5;
LGTemplateParser.INVALID_TOKEN = 6;
LGTemplateParser.WS_IN_BODY = 7;
LGTemplateParser.MULTILINE_PREFIX = 8;
LGTemplateParser.NEWLINE_IN_BODY = 9;
LGTemplateParser.IF = 10;
LGTemplateParser.ELSEIF = 11;
LGTemplateParser.ELSE = 12;
LGTemplateParser.SWITCH = 13;
LGTemplateParser.CASE = 14;
LGTemplateParser.DEFAULT = 15;
LGTemplateParser.ESCAPE_CHARACTER = 16;
LGTemplateParser.EXPRESSION = 17;
LGTemplateParser.TEXT = 18;
LGTemplateParser.MULTILINE_SUFFIX = 19;
LGTemplateParser.WS_IN_STRUCTURE_NAME = 20;
LGTemplateParser.NEWLINE_IN_STRUCTURE_NAME = 21;
LGTemplateParser.STRUCTURE_NAME = 22;
LGTemplateParser.TEXT_IN_STRUCTURE_NAME = 23;
LGTemplateParser.STRUCTURED_COMMENTS = 24;
LGTemplateParser.WS_IN_STRUCTURE_BODY = 25;
LGTemplateParser.STRUCTURED_NEWLINE = 26;
LGTemplateParser.STRUCTURED_BODY_END = 27;
LGTemplateParser.STRUCTURE_IDENTIFIER = 28;
LGTemplateParser.STRUCTURE_EQUALS = 29;
LGTemplateParser.STRUCTURE_OR_MARK = 30;
LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY = 31;
LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY = 32;
LGTemplateParser.TEXT_IN_STRUCTURE_BODY = 33;
LGTemplateParser.RULE_template = 0;
LGTemplateParser.RULE_body = 1;
LGTemplateParser.RULE_structuredTemplateBody = 2;
LGTemplateParser.RULE_structuredBodyNameLine = 3;
LGTemplateParser.RULE_errorStructuredName = 4;
LGTemplateParser.RULE_structuredBodyContentLine = 5;
LGTemplateParser.RULE_errorStructureLine = 6;
LGTemplateParser.RULE_keyValueStructureLine = 7;
LGTemplateParser.RULE_keyValueStructureValue = 8;
LGTemplateParser.RULE_structuredBodyEndLine = 9;
LGTemplateParser.RULE_normalTemplateBody = 10;
LGTemplateParser.RULE_templateString = 11;
LGTemplateParser.RULE_normalTemplateString = 12;
LGTemplateParser.RULE_errorTemplateString = 13;
LGTemplateParser.RULE_ifElseTemplateBody = 14;
LGTemplateParser.RULE_ifConditionRule = 15;
LGTemplateParser.RULE_ifCondition = 16;
LGTemplateParser.RULE_switchCaseTemplateBody = 17;
LGTemplateParser.RULE_switchCaseRule = 18;
LGTemplateParser.RULE_switchCaseStat = 19;
LGTemplateParser.RULE_expression = 20;
LGTemplateParser.RULE_expressionInStructure = 21;
// tslint:disable:no-trailing-whitespace
LGTemplateParser.ruleNames = [
    "template", "body", "structuredTemplateBody", "structuredBodyNameLine",
    "errorStructuredName", "structuredBodyContentLine", "errorStructureLine",
    "keyValueStructureLine", "keyValueStructureValue", "structuredBodyEndLine",
    "normalTemplateBody", "templateString", "normalTemplateString", "errorTemplateString",
    "ifElseTemplateBody", "ifConditionRule", "ifCondition", "switchCaseTemplateBody",
    "switchCaseRule", "switchCaseStat", "expression", "expressionInStructure",
];
LGTemplateParser._LITERAL_NAMES = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, "'|'",
];
LGTemplateParser._SYMBOLIC_NAMES = [
    undefined, "WS", "NEWLINE", "COMMENTS", "DASH", "LEFT_SQUARE_BRACKET",
    "INVALID_TOKEN", "WS_IN_BODY", "MULTILINE_PREFIX", "NEWLINE_IN_BODY",
    "IF", "ELSEIF", "ELSE", "SWITCH", "CASE", "DEFAULT", "ESCAPE_CHARACTER",
    "EXPRESSION", "TEXT", "MULTILINE_SUFFIX", "WS_IN_STRUCTURE_NAME", "NEWLINE_IN_STRUCTURE_NAME",
    "STRUCTURE_NAME", "TEXT_IN_STRUCTURE_NAME", "STRUCTURED_COMMENTS", "WS_IN_STRUCTURE_BODY",
    "STRUCTURED_NEWLINE", "STRUCTURED_BODY_END", "STRUCTURE_IDENTIFIER", "STRUCTURE_EQUALS",
    "STRUCTURE_OR_MARK", "ESCAPE_CHARACTER_IN_STRUCTURE_BODY", "EXPRESSION_IN_STRUCTURE_BODY",
    "TEXT_IN_STRUCTURE_BODY",
];
LGTemplateParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(LGTemplateParser._LITERAL_NAMES, LGTemplateParser._SYMBOLIC_NAMES, []);
LGTemplateParser._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03#\xBA\x04\x02" +
    "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" +
    "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04" +
    "\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04" +
    "\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x03" +
    "\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x05\x036\n\x03\x03" +
    "\x04\x03\x04\x05\x04:\n\x04\x03\x04\x03\x04\x06\x04>\n\x04\r\x04\x0E\x04" +
    "?\x05\x04B\n\x04\x03\x04\x05\x04E\n\x04\x03\x05\x03\x05\x03\x05\x05\x05" +
    "J\n\x05\x03\x06\x07\x06M\n\x06\f\x06\x0E\x06P\v\x06\x03\x07\x03\x07\x05" +
    "\x07T\n\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x06\b\\\n\b\r\b\x0E\b" +
    "]\x03\t\x03\t\x03\t\x03\t\x03\t\x07\te\n\t\f\t\x0E\th\v\t\x03\n\x03\n" +
    "\x03\n\x06\nm\n\n\r\n\x0E\nn\x03\v\x03\v\x03\f\x06\ft\n\f\r\f\x0E\fu\x03" +
    "\r\x03\r\x05\rz\n\r\x03\x0E\x03\x0E\x05\x0E~\n\x0E\x03\x0E\x03\x0E\x03" +
    "\x0E\x07\x0E\x83\n\x0E\f\x0E\x0E\x0E\x86\v\x0E\x03\x0E\x05\x0E\x89\n\x0E" +
    "\x03\x0F\x06\x0F\x8C\n\x0F\r\x0F\x0E\x0F\x8D\x03\x10\x06\x10\x91\n\x10" +
    "\r\x10\x0E\x10\x92\x03\x11\x03\x11\x05\x11\x97\n\x11\x03\x12\x03\x12\x03" +
    "\x12\x03\x12\x03\x12\x07\x12\x9E\n\x12\f\x12\x0E\x12\xA1\v\x12\x03\x13" +
    "\x06\x13\xA4\n\x13\r\x13\x0E\x13\xA5\x03\x14\x03\x14\x05\x14\xAA\n\x14" +
    "\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x07\x15\xB1\n\x15\f\x15\x0E\x15" +
    "\xB4\v\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x02\x02\x02\x18\x02" +
    "\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02" +
    "\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02" +
    ",\x02\x02\x05\x03\x02\x18\x19\x03\x02\f\x0E\x03\x02\x0F\x11\x02\xCA\x02" +
    ".\x03\x02\x02\x02\x045\x03\x02\x02\x02\x067\x03\x02\x02\x02\bF\x03\x02" +
    "\x02\x02\nN\x03\x02\x02\x02\fS\x03\x02\x02\x02\x0E[\x03\x02\x02\x02\x10" +
    "_\x03\x02\x02\x02\x12l\x03\x02\x02\x02\x14p\x03\x02\x02\x02\x16s\x03\x02" +
    "\x02\x02\x18y\x03\x02\x02\x02\x1A{\x03\x02\x02\x02\x1C\x8B\x03\x02\x02" +
    "\x02\x1E\x90\x03\x02\x02\x02 \x94\x03\x02\x02\x02\"\x98\x03\x02\x02\x02" +
    "$\xA3\x03\x02\x02\x02&\xA7\x03\x02\x02\x02(\xAB\x03\x02\x02\x02*\xB5\x03" +
    "\x02\x02\x02,\xB7\x03\x02\x02\x02./\x05\x04\x03\x02/0\x07\x02\x02\x03" +
    "0\x03\x03\x02\x02\x0216\x05\x16\f\x0226\x05\x1E\x10\x0236\x05$\x13\x02" +
    "46\x05\x06\x04\x0251\x03\x02\x02\x0252\x03\x02\x02\x0253\x03\x02\x02\x02" +
    "54\x03\x02\x02\x026\x05\x03\x02\x02\x027A\x05\b\x05\x028:\x05\f\x07\x02" +
    "98\x03\x02\x02\x029:\x03\x02\x02\x02:;\x03\x02\x02\x02;>\x07\x1C\x02\x02" +
    "<>\x05\x0E\b\x02=9\x03\x02\x02\x02=<\x03\x02\x02\x02>?\x03\x02\x02\x02" +
    "?=\x03\x02\x02\x02?@\x03\x02\x02\x02@B\x03\x02\x02\x02A=\x03\x02\x02\x02" +
    "AB\x03\x02\x02\x02BD\x03\x02\x02\x02CE\x05\x14\v\x02DC\x03\x02\x02\x02" +
    "DE\x03\x02\x02\x02E\x07\x03\x02\x02\x02FI\x07\x07\x02\x02GJ\x07\x18\x02" +
    "\x02HJ\x05\n\x06\x02IG\x03\x02\x02\x02IH\x03\x02\x02\x02J\t\x03\x02\x02" +
    "\x02KM\t\x02\x02\x02LK\x03\x02\x02\x02MP\x03\x02\x02\x02NL\x03\x02\x02" +
    "\x02NO\x03\x02\x02\x02O\v\x03\x02\x02\x02PN\x03\x02\x02\x02QT\x05\x10" +
    "\t\x02RT\x05,\x17\x02SQ\x03\x02\x02\x02SR\x03\x02\x02\x02T\r\x03\x02\x02" +
    "\x02U\\\x07\x1E\x02\x02V\\\x07\x1F\x02\x02W\\\x07 \x02\x02X\\\x07#\x02" +
    "\x02Y\\\x05,\x17\x02Z\\\x07!\x02\x02[U\x03\x02\x02\x02[V\x03\x02\x02\x02" +
    "[W\x03\x02\x02\x02[X\x03\x02\x02\x02[Y\x03\x02\x02\x02[Z\x03\x02\x02\x02" +
    "\\]\x03\x02\x02\x02][\x03\x02\x02\x02]^\x03\x02\x02\x02^\x0F\x03\x02\x02" +
    "\x02_`\x07\x1E\x02\x02`a\x07\x1F\x02\x02af\x05\x12\n\x02bc\x07 \x02\x02" +
    "ce\x05\x12\n\x02db\x03\x02\x02\x02eh\x03\x02\x02\x02fd\x03\x02\x02\x02" +
    "fg\x03\x02\x02\x02g\x11\x03\x02\x02\x02hf\x03\x02\x02\x02im\x07#\x02\x02" +
    "jm\x05,\x17\x02km\x07!\x02\x02li\x03\x02\x02\x02lj\x03\x02\x02\x02lk\x03" +
    "\x02\x02\x02mn\x03\x02\x02\x02nl\x03\x02\x02\x02no\x03\x02\x02\x02o\x13" +
    "\x03\x02\x02\x02pq\x07\x1D\x02\x02q\x15\x03\x02\x02\x02rt\x05\x18\r\x02" +
    "sr\x03\x02\x02\x02tu\x03\x02\x02\x02us\x03\x02\x02\x02uv\x03\x02\x02\x02" +
    "v\x17\x03\x02\x02\x02wz\x05\x1A\x0E\x02xz\x05\x1C\x0F\x02yw\x03\x02\x02" +
    "\x02yx\x03\x02\x02\x02z\x19\x03\x02\x02\x02{}\x07\x06\x02\x02|~\x07\n" +
    "\x02\x02}|\x03\x02\x02\x02}~\x03\x02\x02\x02~\x84\x03\x02\x02\x02\x7F" +
    "\x83\x07\x14\x02\x02\x80\x83\x05*\x16\x02\x81\x83\x07\x12\x02\x02\x82" +
    "\x7F\x03\x02\x02\x02\x82\x80\x03\x02\x02\x02\x82\x81\x03\x02\x02\x02\x83" +
    "\x86\x03\x02\x02\x02\x84\x82\x03\x02\x02\x02\x84\x85\x03\x02\x02\x02\x85" +
    "\x88\x03\x02\x02\x02\x86\x84\x03\x02\x02\x02\x87\x89\x07\x15\x02\x02\x88" +
    "\x87\x03\x02\x02\x02\x88\x89\x03\x02\x02\x02\x89\x1B\x03\x02\x02\x02\x8A" +
    "\x8C\x07\b\x02\x02\x8B\x8A\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D" +
    "\x8B\x03\x02\x02\x02\x8D\x8E\x03\x02\x02\x02\x8E\x1D\x03\x02\x02\x02\x8F" +
    "\x91\x05 \x11\x02\x90\x8F\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92" +
    "\x90\x03\x02\x02\x02\x92\x93\x03\x02\x02\x02\x93\x1F\x03\x02\x02\x02\x94" +
    "\x96\x05\"\x12\x02\x95\x97\x05\x16\f\x02\x96\x95\x03\x02\x02\x02\x96\x97" +
    "\x03\x02\x02\x02\x97!\x03\x02\x02\x02\x98\x99\x07\x06\x02\x02\x99\x9F" +
    "\t\x03\x02\x02\x9A\x9E\x07\x03\x02\x02\x9B\x9E\x07\x14\x02\x02\x9C\x9E" +
    "\x05*\x16\x02\x9D\x9A\x03\x02\x02\x02\x9D\x9B\x03\x02\x02\x02\x9D\x9C" +
    "\x03\x02\x02\x02\x9E\xA1\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\x9F\xA0" +
    "\x03\x02\x02\x02\xA0#\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA2\xA4" +
    "\x05&\x14\x02\xA3\xA2\x03\x02\x02\x02\xA4\xA5\x03\x02\x02\x02\xA5\xA3" +
    "\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6%\x03\x02\x02\x02\xA7\xA9" +
    "\x05(\x15\x02\xA8\xAA\x05\x16\f\x02\xA9\xA8\x03\x02\x02\x02\xA9\xAA\x03" +
    "\x02\x02\x02\xAA\'\x03\x02\x02\x02\xAB\xAC\x07\x06\x02\x02\xAC\xB2\t\x04" +
    "\x02\x02\xAD\xB1\x07\x03\x02\x02\xAE\xB1\x07\x14\x02\x02\xAF\xB1\x05*" +
    "\x16\x02\xB0\xAD\x03\x02\x02\x02\xB0\xAE\x03\x02\x02\x02\xB0\xAF\x03\x02" +
    "\x02\x02\xB1\xB4\x03\x02\x02\x02\xB2\xB0\x03\x02\x02\x02\xB2\xB3\x03\x02" +
    "\x02\x02\xB3)\x03\x02\x02\x02\xB4\xB2\x03\x02\x02\x02\xB5\xB6\x07\x13" +
    "\x02\x02\xB6+\x03\x02\x02\x02\xB7\xB8\x07\"\x02\x02\xB8-\x03\x02\x02\x02" +
    "\x1F59=?ADINS[]flnuy}\x82\x84\x88\x8D\x92\x96\x9D\x9F\xA5\xA9\xB0\xB2";
exports.LGTemplateParser = LGTemplateParser;
class TemplateContext extends ParserRuleContext_1.ParserRuleContext {
    body() {
        return this.getRuleContext(0, BodyContext);
    }
    EOF() { return this.getToken(LGTemplateParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_template; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemplate) {
            listener.enterTemplate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemplate) {
            listener.exitTemplate(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTemplate) {
            return visitor.visitTemplate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TemplateContext = TemplateContext;
class BodyContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_body; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.BodyContext = BodyContext;
class NormalBodyContext extends BodyContext {
    normalTemplateBody() {
        return this.getRuleContext(0, NormalTemplateBodyContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterNormalBody) {
            listener.enterNormalBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNormalBody) {
            listener.exitNormalBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNormalBody) {
            return visitor.visitNormalBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NormalBodyContext = NormalBodyContext;
class IfElseBodyContext extends BodyContext {
    ifElseTemplateBody() {
        return this.getRuleContext(0, IfElseTemplateBodyContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterIfElseBody) {
            listener.enterIfElseBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfElseBody) {
            listener.exitIfElseBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIfElseBody) {
            return visitor.visitIfElseBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IfElseBodyContext = IfElseBodyContext;
class SwitchCaseBodyContext extends BodyContext {
    switchCaseTemplateBody() {
        return this.getRuleContext(0, SwitchCaseTemplateBodyContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSwitchCaseBody) {
            listener.enterSwitchCaseBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSwitchCaseBody) {
            listener.exitSwitchCaseBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSwitchCaseBody) {
            return visitor.visitSwitchCaseBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SwitchCaseBodyContext = SwitchCaseBodyContext;
class StructuredBodyContext extends BodyContext {
    structuredTemplateBody() {
        return this.getRuleContext(0, StructuredTemplateBodyContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterStructuredBody) {
            listener.enterStructuredBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStructuredBody) {
            listener.exitStructuredBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStructuredBody) {
            return visitor.visitStructuredBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StructuredBodyContext = StructuredBodyContext;
class StructuredTemplateBodyContext extends ParserRuleContext_1.ParserRuleContext {
    structuredBodyNameLine() {
        return this.getRuleContext(0, StructuredBodyNameLineContext);
    }
    structuredBodyEndLine() {
        return this.tryGetRuleContext(0, StructuredBodyEndLineContext);
    }
    errorStructureLine(i) {
        if (i === undefined) {
            return this.getRuleContexts(ErrorStructureLineContext);
        }
        else {
            return this.getRuleContext(i, ErrorStructureLineContext);
        }
    }
    STRUCTURED_NEWLINE(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.STRUCTURED_NEWLINE);
        }
        else {
            return this.getToken(LGTemplateParser.STRUCTURED_NEWLINE, i);
        }
    }
    structuredBodyContentLine(i) {
        if (i === undefined) {
            return this.getRuleContexts(StructuredBodyContentLineContext);
        }
        else {
            return this.getRuleContext(i, StructuredBodyContentLineContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_structuredTemplateBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterStructuredTemplateBody) {
            listener.enterStructuredTemplateBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStructuredTemplateBody) {
            listener.exitStructuredTemplateBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStructuredTemplateBody) {
            return visitor.visitStructuredTemplateBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StructuredTemplateBodyContext = StructuredTemplateBodyContext;
class StructuredBodyNameLineContext extends ParserRuleContext_1.ParserRuleContext {
    LEFT_SQUARE_BRACKET() { return this.getToken(LGTemplateParser.LEFT_SQUARE_BRACKET, 0); }
    STRUCTURE_NAME() { return this.tryGetToken(LGTemplateParser.STRUCTURE_NAME, 0); }
    errorStructuredName() {
        return this.tryGetRuleContext(0, ErrorStructuredNameContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_structuredBodyNameLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterStructuredBodyNameLine) {
            listener.enterStructuredBodyNameLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStructuredBodyNameLine) {
            listener.exitStructuredBodyNameLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStructuredBodyNameLine) {
            return visitor.visitStructuredBodyNameLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StructuredBodyNameLineContext = StructuredBodyNameLineContext;
class ErrorStructuredNameContext extends ParserRuleContext_1.ParserRuleContext {
    STRUCTURE_NAME(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.STRUCTURE_NAME);
        }
        else {
            return this.getToken(LGTemplateParser.STRUCTURE_NAME, i);
        }
    }
    TEXT_IN_STRUCTURE_NAME(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.TEXT_IN_STRUCTURE_NAME);
        }
        else {
            return this.getToken(LGTemplateParser.TEXT_IN_STRUCTURE_NAME, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_errorStructuredName; }
    // @Override
    enterRule(listener) {
        if (listener.enterErrorStructuredName) {
            listener.enterErrorStructuredName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitErrorStructuredName) {
            listener.exitErrorStructuredName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitErrorStructuredName) {
            return visitor.visitErrorStructuredName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ErrorStructuredNameContext = ErrorStructuredNameContext;
class StructuredBodyContentLineContext extends ParserRuleContext_1.ParserRuleContext {
    keyValueStructureLine() {
        return this.tryGetRuleContext(0, KeyValueStructureLineContext);
    }
    expressionInStructure() {
        return this.tryGetRuleContext(0, ExpressionInStructureContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_structuredBodyContentLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterStructuredBodyContentLine) {
            listener.enterStructuredBodyContentLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStructuredBodyContentLine) {
            listener.exitStructuredBodyContentLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStructuredBodyContentLine) {
            return visitor.visitStructuredBodyContentLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StructuredBodyContentLineContext = StructuredBodyContentLineContext;
class ErrorStructureLineContext extends ParserRuleContext_1.ParserRuleContext {
    STRUCTURE_IDENTIFIER(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.STRUCTURE_IDENTIFIER);
        }
        else {
            return this.getToken(LGTemplateParser.STRUCTURE_IDENTIFIER, i);
        }
    }
    STRUCTURE_EQUALS(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.STRUCTURE_EQUALS);
        }
        else {
            return this.getToken(LGTemplateParser.STRUCTURE_EQUALS, i);
        }
    }
    STRUCTURE_OR_MARK(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.STRUCTURE_OR_MARK);
        }
        else {
            return this.getToken(LGTemplateParser.STRUCTURE_OR_MARK, i);
        }
    }
    TEXT_IN_STRUCTURE_BODY(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.TEXT_IN_STRUCTURE_BODY);
        }
        else {
            return this.getToken(LGTemplateParser.TEXT_IN_STRUCTURE_BODY, i);
        }
    }
    expressionInStructure(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionInStructureContext);
        }
        else {
            return this.getRuleContext(i, ExpressionInStructureContext);
        }
    }
    ESCAPE_CHARACTER_IN_STRUCTURE_BODY(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY);
        }
        else {
            return this.getToken(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_errorStructureLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterErrorStructureLine) {
            listener.enterErrorStructureLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitErrorStructureLine) {
            listener.exitErrorStructureLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitErrorStructureLine) {
            return visitor.visitErrorStructureLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ErrorStructureLineContext = ErrorStructureLineContext;
class KeyValueStructureLineContext extends ParserRuleContext_1.ParserRuleContext {
    STRUCTURE_IDENTIFIER() { return this.getToken(LGTemplateParser.STRUCTURE_IDENTIFIER, 0); }
    STRUCTURE_EQUALS() { return this.getToken(LGTemplateParser.STRUCTURE_EQUALS, 0); }
    keyValueStructureValue(i) {
        if (i === undefined) {
            return this.getRuleContexts(KeyValueStructureValueContext);
        }
        else {
            return this.getRuleContext(i, KeyValueStructureValueContext);
        }
    }
    STRUCTURE_OR_MARK(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.STRUCTURE_OR_MARK);
        }
        else {
            return this.getToken(LGTemplateParser.STRUCTURE_OR_MARK, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_keyValueStructureLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyValueStructureLine) {
            listener.enterKeyValueStructureLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyValueStructureLine) {
            listener.exitKeyValueStructureLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitKeyValueStructureLine) {
            return visitor.visitKeyValueStructureLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.KeyValueStructureLineContext = KeyValueStructureLineContext;
class KeyValueStructureValueContext extends ParserRuleContext_1.ParserRuleContext {
    TEXT_IN_STRUCTURE_BODY(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.TEXT_IN_STRUCTURE_BODY);
        }
        else {
            return this.getToken(LGTemplateParser.TEXT_IN_STRUCTURE_BODY, i);
        }
    }
    expressionInStructure(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionInStructureContext);
        }
        else {
            return this.getRuleContext(i, ExpressionInStructureContext);
        }
    }
    ESCAPE_CHARACTER_IN_STRUCTURE_BODY(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY);
        }
        else {
            return this.getToken(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_keyValueStructureValue; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyValueStructureValue) {
            listener.enterKeyValueStructureValue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyValueStructureValue) {
            listener.exitKeyValueStructureValue(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitKeyValueStructureValue) {
            return visitor.visitKeyValueStructureValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.KeyValueStructureValueContext = KeyValueStructureValueContext;
class StructuredBodyEndLineContext extends ParserRuleContext_1.ParserRuleContext {
    STRUCTURED_BODY_END() { return this.getToken(LGTemplateParser.STRUCTURED_BODY_END, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_structuredBodyEndLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterStructuredBodyEndLine) {
            listener.enterStructuredBodyEndLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStructuredBodyEndLine) {
            listener.exitStructuredBodyEndLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStructuredBodyEndLine) {
            return visitor.visitStructuredBodyEndLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StructuredBodyEndLineContext = StructuredBodyEndLineContext;
class NormalTemplateBodyContext extends ParserRuleContext_1.ParserRuleContext {
    templateString(i) {
        if (i === undefined) {
            return this.getRuleContexts(TemplateStringContext);
        }
        else {
            return this.getRuleContext(i, TemplateStringContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_normalTemplateBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterNormalTemplateBody) {
            listener.enterNormalTemplateBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNormalTemplateBody) {
            listener.exitNormalTemplateBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNormalTemplateBody) {
            return visitor.visitNormalTemplateBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NormalTemplateBodyContext = NormalTemplateBodyContext;
class TemplateStringContext extends ParserRuleContext_1.ParserRuleContext {
    normalTemplateString() {
        return this.tryGetRuleContext(0, NormalTemplateStringContext);
    }
    errorTemplateString() {
        return this.tryGetRuleContext(0, ErrorTemplateStringContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_templateString; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemplateString) {
            listener.enterTemplateString(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemplateString) {
            listener.exitTemplateString(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTemplateString) {
            return visitor.visitTemplateString(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TemplateStringContext = TemplateStringContext;
class NormalTemplateStringContext extends ParserRuleContext_1.ParserRuleContext {
    DASH() { return this.getToken(LGTemplateParser.DASH, 0); }
    MULTILINE_PREFIX() { return this.tryGetToken(LGTemplateParser.MULTILINE_PREFIX, 0); }
    TEXT(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.TEXT);
        }
        else {
            return this.getToken(LGTemplateParser.TEXT, i);
        }
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    ESCAPE_CHARACTER(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.ESCAPE_CHARACTER);
        }
        else {
            return this.getToken(LGTemplateParser.ESCAPE_CHARACTER, i);
        }
    }
    MULTILINE_SUFFIX() { return this.tryGetToken(LGTemplateParser.MULTILINE_SUFFIX, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_normalTemplateString; }
    // @Override
    enterRule(listener) {
        if (listener.enterNormalTemplateString) {
            listener.enterNormalTemplateString(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNormalTemplateString) {
            listener.exitNormalTemplateString(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNormalTemplateString) {
            return visitor.visitNormalTemplateString(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NormalTemplateStringContext = NormalTemplateStringContext;
class ErrorTemplateStringContext extends ParserRuleContext_1.ParserRuleContext {
    INVALID_TOKEN(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.INVALID_TOKEN);
        }
        else {
            return this.getToken(LGTemplateParser.INVALID_TOKEN, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_errorTemplateString; }
    // @Override
    enterRule(listener) {
        if (listener.enterErrorTemplateString) {
            listener.enterErrorTemplateString(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitErrorTemplateString) {
            listener.exitErrorTemplateString(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitErrorTemplateString) {
            return visitor.visitErrorTemplateString(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ErrorTemplateStringContext = ErrorTemplateStringContext;
class IfElseTemplateBodyContext extends ParserRuleContext_1.ParserRuleContext {
    ifConditionRule(i) {
        if (i === undefined) {
            return this.getRuleContexts(IfConditionRuleContext);
        }
        else {
            return this.getRuleContext(i, IfConditionRuleContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_ifElseTemplateBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfElseTemplateBody) {
            listener.enterIfElseTemplateBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfElseTemplateBody) {
            listener.exitIfElseTemplateBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIfElseTemplateBody) {
            return visitor.visitIfElseTemplateBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IfElseTemplateBodyContext = IfElseTemplateBodyContext;
class IfConditionRuleContext extends ParserRuleContext_1.ParserRuleContext {
    ifCondition() {
        return this.getRuleContext(0, IfConditionContext);
    }
    normalTemplateBody() {
        return this.tryGetRuleContext(0, NormalTemplateBodyContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_ifConditionRule; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfConditionRule) {
            listener.enterIfConditionRule(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfConditionRule) {
            listener.exitIfConditionRule(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIfConditionRule) {
            return visitor.visitIfConditionRule(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IfConditionRuleContext = IfConditionRuleContext;
class IfConditionContext extends ParserRuleContext_1.ParserRuleContext {
    DASH() { return this.getToken(LGTemplateParser.DASH, 0); }
    IF() { return this.tryGetToken(LGTemplateParser.IF, 0); }
    ELSE() { return this.tryGetToken(LGTemplateParser.ELSE, 0); }
    ELSEIF() { return this.tryGetToken(LGTemplateParser.ELSEIF, 0); }
    WS(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.WS);
        }
        else {
            return this.getToken(LGTemplateParser.WS, i);
        }
    }
    TEXT(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.TEXT);
        }
        else {
            return this.getToken(LGTemplateParser.TEXT, i);
        }
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_ifCondition; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfCondition) {
            listener.enterIfCondition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfCondition) {
            listener.exitIfCondition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIfCondition) {
            return visitor.visitIfCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IfConditionContext = IfConditionContext;
class SwitchCaseTemplateBodyContext extends ParserRuleContext_1.ParserRuleContext {
    switchCaseRule(i) {
        if (i === undefined) {
            return this.getRuleContexts(SwitchCaseRuleContext);
        }
        else {
            return this.getRuleContext(i, SwitchCaseRuleContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_switchCaseTemplateBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterSwitchCaseTemplateBody) {
            listener.enterSwitchCaseTemplateBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSwitchCaseTemplateBody) {
            listener.exitSwitchCaseTemplateBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSwitchCaseTemplateBody) {
            return visitor.visitSwitchCaseTemplateBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SwitchCaseTemplateBodyContext = SwitchCaseTemplateBodyContext;
class SwitchCaseRuleContext extends ParserRuleContext_1.ParserRuleContext {
    switchCaseStat() {
        return this.getRuleContext(0, SwitchCaseStatContext);
    }
    normalTemplateBody() {
        return this.tryGetRuleContext(0, NormalTemplateBodyContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_switchCaseRule; }
    // @Override
    enterRule(listener) {
        if (listener.enterSwitchCaseRule) {
            listener.enterSwitchCaseRule(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSwitchCaseRule) {
            listener.exitSwitchCaseRule(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSwitchCaseRule) {
            return visitor.visitSwitchCaseRule(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SwitchCaseRuleContext = SwitchCaseRuleContext;
class SwitchCaseStatContext extends ParserRuleContext_1.ParserRuleContext {
    DASH() { return this.getToken(LGTemplateParser.DASH, 0); }
    SWITCH() { return this.tryGetToken(LGTemplateParser.SWITCH, 0); }
    CASE() { return this.tryGetToken(LGTemplateParser.CASE, 0); }
    DEFAULT() { return this.tryGetToken(LGTemplateParser.DEFAULT, 0); }
    WS(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.WS);
        }
        else {
            return this.getToken(LGTemplateParser.WS, i);
        }
    }
    TEXT(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.TEXT);
        }
        else {
            return this.getToken(LGTemplateParser.TEXT, i);
        }
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_switchCaseStat; }
    // @Override
    enterRule(listener) {
        if (listener.enterSwitchCaseStat) {
            listener.enterSwitchCaseStat(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSwitchCaseStat) {
            listener.exitSwitchCaseStat(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSwitchCaseStat) {
            return visitor.visitSwitchCaseStat(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SwitchCaseStatContext = SwitchCaseStatContext;
class ExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    EXPRESSION() { return this.getToken(LGTemplateParser.EXPRESSION, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_expression; }
    // @Override
    enterRule(listener) {
        if (listener.enterExpression) {
            listener.enterExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExpression) {
            listener.exitExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ExpressionContext = ExpressionContext;
class ExpressionInStructureContext extends ParserRuleContext_1.ParserRuleContext {
    EXPRESSION_IN_STRUCTURE_BODY() { return this.getToken(LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_expressionInStructure; }
    // @Override
    enterRule(listener) {
        if (listener.enterExpressionInStructure) {
            listener.enterExpressionInStructure(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExpressionInStructure) {
            listener.exitExpressionInStructure(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExpressionInStructure) {
            return visitor.visitExpressionInStructure(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ExpressionInStructureContext = ExpressionInStructureContext;
//# sourceMappingURL=LGTemplateParser.js.map