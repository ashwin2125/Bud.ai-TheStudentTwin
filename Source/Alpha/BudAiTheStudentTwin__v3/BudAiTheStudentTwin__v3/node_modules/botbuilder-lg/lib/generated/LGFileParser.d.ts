/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { ATN } from "antlr4ts/atn/ATN";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { LGFileParserListener } from "./LGFileParserListener";
import { LGFileParserVisitor } from "./LGFileParserVisitor";
export declare class LGFileParser extends Parser {
    static readonly NEWLINE = 1;
    static readonly OPTION = 2;
    static readonly COMMENT = 3;
    static readonly IMPORT = 4;
    static readonly TEMPLATE_NAME_LINE = 5;
    static readonly INLINE_MULTILINE = 6;
    static readonly MULTILINE_PREFIX = 7;
    static readonly TEMPLATE_BODY = 8;
    static readonly INVALID_LINE = 9;
    static readonly MULTILINE_SUFFIX = 10;
    static readonly ESCAPE_CHARACTER = 11;
    static readonly MULTILINE_TEXT = 12;
    static readonly RULE_file = 0;
    static readonly RULE_paragraph = 1;
    static readonly RULE_commentDefinition = 2;
    static readonly RULE_importDefinition = 3;
    static readonly RULE_optionDefinition = 4;
    static readonly RULE_errorDefinition = 5;
    static readonly RULE_templateDefinition = 6;
    static readonly RULE_templateNameLine = 7;
    static readonly RULE_templateBody = 8;
    static readonly RULE_templateBodyLine = 9;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    readonly vocabulary: Vocabulary;
    readonly grammarFileName: string;
    readonly ruleNames: string[];
    readonly serializedATN: string;
    constructor(input: TokenStream);
    file(): FileContext;
    paragraph(): ParagraphContext;
    commentDefinition(): CommentDefinitionContext;
    importDefinition(): ImportDefinitionContext;
    optionDefinition(): OptionDefinitionContext;
    errorDefinition(): ErrorDefinitionContext;
    templateDefinition(): TemplateDefinitionContext;
    templateNameLine(): TemplateNameLineContext;
    templateBody(): TemplateBodyContext;
    templateBodyLine(): TemplateBodyLineContext;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static readonly _ATN: ATN;
}
export declare class FileContext extends ParserRuleContext {
    EOF(): TerminalNode;
    paragraph(): ParagraphContext[];
    paragraph(i: number): ParagraphContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: LGFileParserListener): void;
    exitRule(listener: LGFileParserListener): void;
    accept<Result>(visitor: LGFileParserVisitor<Result>): Result;
}
export declare class ParagraphContext extends ParserRuleContext {
    templateDefinition(): TemplateDefinitionContext | undefined;
    importDefinition(): ImportDefinitionContext | undefined;
    optionDefinition(): OptionDefinitionContext | undefined;
    errorDefinition(): ErrorDefinitionContext | undefined;
    commentDefinition(): CommentDefinitionContext | undefined;
    NEWLINE(): TerminalNode | undefined;
    EOF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: LGFileParserListener): void;
    exitRule(listener: LGFileParserListener): void;
    accept<Result>(visitor: LGFileParserVisitor<Result>): Result;
}
export declare class CommentDefinitionContext extends ParserRuleContext {
    COMMENT(): TerminalNode;
    NEWLINE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: LGFileParserListener): void;
    exitRule(listener: LGFileParserListener): void;
    accept<Result>(visitor: LGFileParserVisitor<Result>): Result;
}
export declare class ImportDefinitionContext extends ParserRuleContext {
    IMPORT(): TerminalNode;
    NEWLINE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: LGFileParserListener): void;
    exitRule(listener: LGFileParserListener): void;
    accept<Result>(visitor: LGFileParserVisitor<Result>): Result;
}
export declare class OptionDefinitionContext extends ParserRuleContext {
    OPTION(): TerminalNode;
    NEWLINE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: LGFileParserListener): void;
    exitRule(listener: LGFileParserListener): void;
    accept<Result>(visitor: LGFileParserVisitor<Result>): Result;
}
export declare class ErrorDefinitionContext extends ParserRuleContext {
    INVALID_LINE(): TerminalNode;
    NEWLINE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: LGFileParserListener): void;
    exitRule(listener: LGFileParserListener): void;
    accept<Result>(visitor: LGFileParserVisitor<Result>): Result;
}
export declare class TemplateDefinitionContext extends ParserRuleContext {
    templateNameLine(): TemplateNameLineContext;
    templateBody(): TemplateBodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: LGFileParserListener): void;
    exitRule(listener: LGFileParserListener): void;
    accept<Result>(visitor: LGFileParserVisitor<Result>): Result;
}
export declare class TemplateNameLineContext extends ParserRuleContext {
    TEMPLATE_NAME_LINE(): TerminalNode;
    NEWLINE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: LGFileParserListener): void;
    exitRule(listener: LGFileParserListener): void;
    accept<Result>(visitor: LGFileParserVisitor<Result>): Result;
}
export declare class TemplateBodyContext extends ParserRuleContext {
    templateBodyLine(): TemplateBodyLineContext[];
    templateBodyLine(i: number): TemplateBodyLineContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: LGFileParserListener): void;
    exitRule(listener: LGFileParserListener): void;
    accept<Result>(visitor: LGFileParserVisitor<Result>): Result;
}
export declare class TemplateBodyLineContext extends ParserRuleContext {
    TEMPLATE_BODY(): TerminalNode | undefined;
    INLINE_MULTILINE(): TerminalNode | undefined;
    NEWLINE(): TerminalNode | undefined;
    MULTILINE_PREFIX(): TerminalNode | undefined;
    MULTILINE_SUFFIX(): TerminalNode | undefined;
    MULTILINE_TEXT(): TerminalNode[];
    MULTILINE_TEXT(i: number): TerminalNode;
    ESCAPE_CHARACTER(): TerminalNode[];
    ESCAPE_CHARACTER(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: LGFileParserListener): void;
    exitRule(listener: LGFileParserListener): void;
    accept<Result>(visitor: LGFileParserVisitor<Result>): Result;
}
//# sourceMappingURL=LGFileParser.d.ts.map