"use strict";
// Generated from src/LGFileParser.g4 by ANTLR 4.7.3-SNAPSHOT
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const ATN_1 = require("antlr4ts/atn/ATN");
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const NoViableAltException_1 = require("antlr4ts/NoViableAltException");
const Parser_1 = require("antlr4ts/Parser");
const ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
const ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
const RecognitionException_1 = require("antlr4ts/RecognitionException");
const Token_1 = require("antlr4ts/Token");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = require("antlr4ts/misc/Utils");
class LGFileParser extends Parser_1.Parser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator_1.ParserATNSimulator(LGFileParser._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return LGFileParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "LGFileParser.g4"; }
    // @Override
    get ruleNames() { return LGFileParser.ruleNames; }
    // @Override
    get serializedATN() { return LGFileParser._serializedATN; }
    // @RuleVersion(0)
    file() {
        let _localctx = new FileContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, LGFileParser.RULE_file);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 21;
                this._errHandler.sync(this);
                _alt = 1 + 1;
                do {
                    switch (_alt) {
                        case 1 + 1:
                            {
                                {
                                    this.state = 20;
                                    this.paragraph();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 23;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 0, this._ctx);
                } while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 25;
                this.match(LGFileParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    paragraph() {
        let _localctx = new ParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, LGFileParser.RULE_paragraph);
        try {
            this.state = 34;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case LGFileParser.TEMPLATE_NAME_LINE:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 27;
                        this.templateDefinition();
                    }
                    break;
                case LGFileParser.IMPORT:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 28;
                        this.importDefinition();
                    }
                    break;
                case LGFileParser.OPTION:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 29;
                        this.optionDefinition();
                    }
                    break;
                case LGFileParser.INVALID_LINE:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 30;
                        this.errorDefinition();
                    }
                    break;
                case LGFileParser.COMMENT:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 31;
                        this.commentDefinition();
                    }
                    break;
                case LGFileParser.NEWLINE:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 32;
                        this.match(LGFileParser.NEWLINE);
                    }
                    break;
                case LGFileParser.EOF:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 33;
                        this.match(LGFileParser.EOF);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    commentDefinition() {
        let _localctx = new CommentDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, LGFileParser.RULE_commentDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 36;
                this.match(LGFileParser.COMMENT);
                this.state = 38;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {
                    case 1:
                        {
                            this.state = 37;
                            this.match(LGFileParser.NEWLINE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    importDefinition() {
        let _localctx = new ImportDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, LGFileParser.RULE_importDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 40;
                this.match(LGFileParser.IMPORT);
                this.state = 42;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 3, this._ctx)) {
                    case 1:
                        {
                            this.state = 41;
                            this.match(LGFileParser.NEWLINE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    optionDefinition() {
        let _localctx = new OptionDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, LGFileParser.RULE_optionDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 44;
                this.match(LGFileParser.OPTION);
                this.state = 46;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 4, this._ctx)) {
                    case 1:
                        {
                            this.state = 45;
                            this.match(LGFileParser.NEWLINE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    errorDefinition() {
        let _localctx = new ErrorDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, LGFileParser.RULE_errorDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 48;
                this.match(LGFileParser.INVALID_LINE);
                this.state = 50;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 5, this._ctx)) {
                    case 1:
                        {
                            this.state = 49;
                            this.match(LGFileParser.NEWLINE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    templateDefinition() {
        let _localctx = new TemplateDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, LGFileParser.RULE_templateDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 52;
                this.templateNameLine();
                this.state = 53;
                this.templateBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    templateNameLine() {
        let _localctx = new TemplateNameLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, LGFileParser.RULE_templateNameLine);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 55;
                this.match(LGFileParser.TEMPLATE_NAME_LINE);
                this.state = 57;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {
                    case 1:
                        {
                            this.state = 56;
                            this.match(LGFileParser.NEWLINE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    templateBody() {
        let _localctx = new TemplateBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, LGFileParser.RULE_templateBody);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 62;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 59;
                                this.templateBodyLine();
                            }
                        }
                    }
                    this.state = 64;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    templateBodyLine() {
        let _localctx = new TemplateBodyLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, LGFileParser.RULE_templateBodyLine);
        let _la;
        try {
            this.state = 83;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case LGFileParser.INLINE_MULTILINE:
                case LGFileParser.MULTILINE_PREFIX:
                case LGFileParser.TEMPLATE_BODY:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        {
                            this.state = 77;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case LGFileParser.TEMPLATE_BODY:
                                    {
                                        this.state = 65;
                                        this.match(LGFileParser.TEMPLATE_BODY);
                                    }
                                    break;
                                case LGFileParser.INLINE_MULTILINE:
                                    {
                                        this.state = 66;
                                        this.match(LGFileParser.INLINE_MULTILINE);
                                    }
                                    break;
                                case LGFileParser.MULTILINE_PREFIX:
                                    {
                                        {
                                            this.state = 67;
                                            this.match(LGFileParser.MULTILINE_PREFIX);
                                            this.state = 71;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === LGFileParser.ESCAPE_CHARACTER || _la === LGFileParser.MULTILINE_TEXT) {
                                                {
                                                    {
                                                        this.state = 68;
                                                        _la = this._input.LA(1);
                                                        if (!(_la === LGFileParser.ESCAPE_CHARACTER || _la === LGFileParser.MULTILINE_TEXT)) {
                                                            this._errHandler.recoverInline(this);
                                                        }
                                                        else {
                                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                                this.matchedEOF = true;
                                                            }
                                                            this._errHandler.reportMatch(this);
                                                            this.consume();
                                                        }
                                                    }
                                                }
                                                this.state = 73;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 75;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === LGFileParser.MULTILINE_SUFFIX) {
                                                {
                                                    this.state = 74;
                                                    this.match(LGFileParser.MULTILINE_SUFFIX);
                                                }
                                            }
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 80;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 11, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 79;
                                        this.match(LGFileParser.NEWLINE);
                                    }
                                    break;
                            }
                        }
                    }
                    break;
                case LGFileParser.NEWLINE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 82;
                        this.match(LGFileParser.NEWLINE);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    static get _ATN() {
        if (!LGFileParser.__ATN) {
            LGFileParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(LGFileParser._serializedATN));
        }
        return LGFileParser.__ATN;
    }
}
LGFileParser.NEWLINE = 1;
LGFileParser.OPTION = 2;
LGFileParser.COMMENT = 3;
LGFileParser.IMPORT = 4;
LGFileParser.TEMPLATE_NAME_LINE = 5;
LGFileParser.INLINE_MULTILINE = 6;
LGFileParser.MULTILINE_PREFIX = 7;
LGFileParser.TEMPLATE_BODY = 8;
LGFileParser.INVALID_LINE = 9;
LGFileParser.MULTILINE_SUFFIX = 10;
LGFileParser.ESCAPE_CHARACTER = 11;
LGFileParser.MULTILINE_TEXT = 12;
LGFileParser.RULE_file = 0;
LGFileParser.RULE_paragraph = 1;
LGFileParser.RULE_commentDefinition = 2;
LGFileParser.RULE_importDefinition = 3;
LGFileParser.RULE_optionDefinition = 4;
LGFileParser.RULE_errorDefinition = 5;
LGFileParser.RULE_templateDefinition = 6;
LGFileParser.RULE_templateNameLine = 7;
LGFileParser.RULE_templateBody = 8;
LGFileParser.RULE_templateBodyLine = 9;
// tslint:disable:no-trailing-whitespace
LGFileParser.ruleNames = [
    "file", "paragraph", "commentDefinition", "importDefinition", "optionDefinition",
    "errorDefinition", "templateDefinition", "templateNameLine", "templateBody",
    "templateBodyLine",
];
LGFileParser._LITERAL_NAMES = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "'```'",
];
LGFileParser._SYMBOLIC_NAMES = [
    undefined, "NEWLINE", "OPTION", "COMMENT", "IMPORT", "TEMPLATE_NAME_LINE",
    "INLINE_MULTILINE", "MULTILINE_PREFIX", "TEMPLATE_BODY", "INVALID_LINE",
    "MULTILINE_SUFFIX", "ESCAPE_CHARACTER", "MULTILINE_TEXT",
];
LGFileParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(LGFileParser._LITERAL_NAMES, LGFileParser._SYMBOLIC_NAMES, []);
LGFileParser._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\x0EX\x04\x02" +
    "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" +
    "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x03\x02\x06\x02\x18\n\x02" +
    "\r\x02\x0E\x02\x19\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
    "\x03\x03\x03\x03\x03\x05\x03%\n\x03\x03\x04\x03\x04\x05\x04)\n\x04\x03" +
    "\x05\x03\x05\x05\x05-\n\x05\x03\x06\x03\x06\x05\x061\n\x06\x03\x07\x03" +
    "\x07\x05\x075\n\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x05\t<\n\t\x03\n\x07" +
    "\n?\n\n\f\n\x0E\nB\v\n\x03\v\x03\v\x03\v\x03\v\x07\vH\n\v\f\v\x0E\vK\v" +
    "\v\x03\v\x05\vN\n\v\x05\vP\n\v\x03\v\x05\vS\n\v\x03\v\x05\vV\n\v\x03\v" +
    "\x03\x19\x02\x02\f\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10" +
    "\x02\x12\x02\x14\x02\x02\x03\x03\x02\r\x0E\x02`\x02\x17\x03\x02\x02\x02" +
    "\x04$\x03\x02\x02\x02\x06&\x03\x02\x02\x02\b*\x03\x02\x02\x02\n.\x03\x02" +
    "\x02\x02\f2\x03\x02\x02\x02\x0E6\x03\x02\x02\x02\x109\x03\x02\x02\x02" +
    "\x12@\x03\x02\x02\x02\x14U\x03\x02\x02\x02\x16\x18\x05\x04\x03\x02\x17" +
    "\x16\x03\x02\x02\x02\x18\x19\x03\x02\x02\x02\x19\x1A\x03\x02\x02\x02\x19" +
    "\x17\x03\x02\x02\x02\x1A\x1B\x03\x02\x02\x02\x1B\x1C\x07\x02\x02\x03\x1C" +
    "\x03\x03\x02\x02\x02\x1D%\x05\x0E\b\x02\x1E%\x05\b\x05\x02\x1F%\x05\n" +
    "\x06\x02 %\x05\f\x07\x02!%\x05\x06\x04\x02\"%\x07\x03\x02\x02#%\x07\x02" +
    "\x02\x03$\x1D\x03\x02\x02\x02$\x1E\x03\x02\x02\x02$\x1F\x03\x02\x02\x02" +
    "$ \x03\x02\x02\x02$!\x03\x02\x02\x02$\"\x03\x02\x02\x02$#\x03\x02\x02" +
    "\x02%\x05\x03\x02\x02\x02&(\x07\x05\x02\x02\')\x07\x03\x02\x02(\'\x03" +
    "\x02\x02\x02()\x03\x02\x02\x02)\x07\x03\x02\x02\x02*,\x07\x06\x02\x02" +
    "+-\x07\x03\x02\x02,+\x03\x02\x02\x02,-\x03\x02\x02\x02-\t\x03\x02\x02" +
    "\x02.0\x07\x04\x02\x02/1\x07\x03\x02\x020/\x03\x02\x02\x0201\x03\x02\x02" +
    "\x021\v\x03\x02\x02\x0224\x07\v\x02\x0235\x07\x03\x02\x0243\x03\x02\x02" +
    "\x0245\x03\x02\x02\x025\r\x03\x02\x02\x0267\x05\x10\t\x0278\x05\x12\n" +
    "\x028\x0F\x03\x02\x02\x029;\x07\x07\x02\x02:<\x07\x03\x02\x02;:\x03\x02" +
    "\x02\x02;<\x03\x02\x02\x02<\x11\x03\x02\x02\x02=?\x05\x14\v\x02>=\x03" +
    "\x02\x02\x02?B\x03\x02\x02\x02@>\x03\x02\x02\x02@A\x03\x02\x02\x02A\x13" +
    "\x03\x02\x02\x02B@\x03\x02\x02\x02CP\x07\n\x02\x02DP\x07\b\x02\x02EI\x07" +
    "\t\x02\x02FH\t\x02\x02\x02GF\x03\x02\x02\x02HK\x03\x02\x02\x02IG\x03\x02" +
    "\x02\x02IJ\x03\x02\x02\x02JM\x03\x02\x02\x02KI\x03\x02\x02\x02LN\x07\f" +
    "\x02\x02ML\x03\x02\x02\x02MN\x03\x02\x02\x02NP\x03\x02\x02\x02OC\x03\x02" +
    "\x02\x02OD\x03\x02\x02\x02OE\x03\x02\x02\x02PR\x03\x02\x02\x02QS\x07\x03" +
    "\x02\x02RQ\x03\x02\x02\x02RS\x03\x02\x02\x02SV\x03\x02\x02\x02TV\x07\x03" +
    "\x02\x02UO\x03\x02\x02\x02UT\x03\x02\x02\x02V\x15\x03\x02\x02\x02\x0F" +
    "\x19$(,04;@IMORU";
exports.LGFileParser = LGFileParser;
class FileContext extends ParserRuleContext_1.ParserRuleContext {
    EOF() { return this.getToken(LGFileParser.EOF, 0); }
    paragraph(i) {
        if (i === undefined) {
            return this.getRuleContexts(ParagraphContext);
        }
        else {
            return this.getRuleContext(i, ParagraphContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_file; }
    // @Override
    enterRule(listener) {
        if (listener.enterFile) {
            listener.enterFile(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFile) {
            listener.exitFile(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFile) {
            return visitor.visitFile(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FileContext = FileContext;
class ParagraphContext extends ParserRuleContext_1.ParserRuleContext {
    templateDefinition() {
        return this.tryGetRuleContext(0, TemplateDefinitionContext);
    }
    importDefinition() {
        return this.tryGetRuleContext(0, ImportDefinitionContext);
    }
    optionDefinition() {
        return this.tryGetRuleContext(0, OptionDefinitionContext);
    }
    errorDefinition() {
        return this.tryGetRuleContext(0, ErrorDefinitionContext);
    }
    commentDefinition() {
        return this.tryGetRuleContext(0, CommentDefinitionContext);
    }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    EOF() { return this.tryGetToken(LGFileParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_paragraph; }
    // @Override
    enterRule(listener) {
        if (listener.enterParagraph) {
            listener.enterParagraph(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitParagraph) {
            listener.exitParagraph(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitParagraph) {
            return visitor.visitParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ParagraphContext = ParagraphContext;
class CommentDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    COMMENT() { return this.getToken(LGFileParser.COMMENT, 0); }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_commentDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterCommentDefinition) {
            listener.enterCommentDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCommentDefinition) {
            listener.exitCommentDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCommentDefinition) {
            return visitor.visitCommentDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CommentDefinitionContext = CommentDefinitionContext;
class ImportDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    IMPORT() { return this.getToken(LGFileParser.IMPORT, 0); }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_importDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterImportDefinition) {
            listener.enterImportDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImportDefinition) {
            listener.exitImportDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitImportDefinition) {
            return visitor.visitImportDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ImportDefinitionContext = ImportDefinitionContext;
class OptionDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    OPTION() { return this.getToken(LGFileParser.OPTION, 0); }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_optionDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterOptionDefinition) {
            listener.enterOptionDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOptionDefinition) {
            listener.exitOptionDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitOptionDefinition) {
            return visitor.visitOptionDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.OptionDefinitionContext = OptionDefinitionContext;
class ErrorDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    INVALID_LINE() { return this.getToken(LGFileParser.INVALID_LINE, 0); }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_errorDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterErrorDefinition) {
            listener.enterErrorDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitErrorDefinition) {
            listener.exitErrorDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitErrorDefinition) {
            return visitor.visitErrorDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ErrorDefinitionContext = ErrorDefinitionContext;
class TemplateDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    templateNameLine() {
        return this.getRuleContext(0, TemplateNameLineContext);
    }
    templateBody() {
        return this.getRuleContext(0, TemplateBodyContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_templateDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemplateDefinition) {
            listener.enterTemplateDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemplateDefinition) {
            listener.exitTemplateDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTemplateDefinition) {
            return visitor.visitTemplateDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TemplateDefinitionContext = TemplateDefinitionContext;
class TemplateNameLineContext extends ParserRuleContext_1.ParserRuleContext {
    TEMPLATE_NAME_LINE() { return this.getToken(LGFileParser.TEMPLATE_NAME_LINE, 0); }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_templateNameLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemplateNameLine) {
            listener.enterTemplateNameLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemplateNameLine) {
            listener.exitTemplateNameLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTemplateNameLine) {
            return visitor.visitTemplateNameLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TemplateNameLineContext = TemplateNameLineContext;
class TemplateBodyContext extends ParserRuleContext_1.ParserRuleContext {
    templateBodyLine(i) {
        if (i === undefined) {
            return this.getRuleContexts(TemplateBodyLineContext);
        }
        else {
            return this.getRuleContext(i, TemplateBodyLineContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_templateBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemplateBody) {
            listener.enterTemplateBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemplateBody) {
            listener.exitTemplateBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTemplateBody) {
            return visitor.visitTemplateBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TemplateBodyContext = TemplateBodyContext;
class TemplateBodyLineContext extends ParserRuleContext_1.ParserRuleContext {
    TEMPLATE_BODY() { return this.tryGetToken(LGFileParser.TEMPLATE_BODY, 0); }
    INLINE_MULTILINE() { return this.tryGetToken(LGFileParser.INLINE_MULTILINE, 0); }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    MULTILINE_PREFIX() { return this.tryGetToken(LGFileParser.MULTILINE_PREFIX, 0); }
    MULTILINE_SUFFIX() { return this.tryGetToken(LGFileParser.MULTILINE_SUFFIX, 0); }
    MULTILINE_TEXT(i) {
        if (i === undefined) {
            return this.getTokens(LGFileParser.MULTILINE_TEXT);
        }
        else {
            return this.getToken(LGFileParser.MULTILINE_TEXT, i);
        }
    }
    ESCAPE_CHARACTER(i) {
        if (i === undefined) {
            return this.getTokens(LGFileParser.ESCAPE_CHARACTER);
        }
        else {
            return this.getToken(LGFileParser.ESCAPE_CHARACTER, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_templateBodyLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemplateBodyLine) {
            listener.enterTemplateBodyLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemplateBodyLine) {
            listener.exitTemplateBodyLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTemplateBodyLine) {
            return visitor.visitTemplateBodyLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TemplateBodyLineContext = TemplateBodyLineContext;
//# sourceMappingURL=LGFileParser.js.map