import { Activity, CardAction } from 'botbuilder';
import { Expression, StringExpression } from 'adaptive-expressions';
import { Converter, ConverterFactory, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
import { BaseTeamsCacheInfoResponseDialog, BaseTeamsCacheInfoResponseDialogConfiguration } from './baseTeamsCacheInfoResponseDialog';
export interface BaseAuthResponseDialogConfiguration extends BaseTeamsCacheInfoResponseDialogConfiguration {
    property?: string | Expression | StringExpression;
    connectionName?: string | Expression | StringExpression;
    title?: string | Expression | StringExpression;
}
/**
 * Base type for auth response dialogs.
 */
export declare abstract class BaseAuthResponseDialog extends BaseTeamsCacheInfoResponseDialog implements BaseAuthResponseDialogConfiguration {
    /**
     * Gets or sets property path to put the TokenResponse value in once retrieved.
     */
    property?: StringExpression;
    /**
     * Gets or sets the name of the OAuth connection.
     */
    connectionName?: StringExpression;
    /**
     * Gets or sets the response title.
     */
    title?: StringExpression;
    getConverter(property: keyof BaseAuthResponseDialogConfiguration | string): Converter | ConverterFactory;
    /**
     * Called when the dialog is started and pushed onto the dialog stack.
     *
     * @param {DialogContext} dc The DialogContext for the turn of conversation.
     * @param {Record<string,any>} _options Optional, initial information to pass to the dialog.
     * @returns {Promise<DialogTurnResult>} Promise representing the DialogTurnResult.
     */
    beginDialog(dc: DialogContext, _options: Record<string, unknown>): Promise<DialogTurnResult>;
    /**
     * Create a type specific Auth Response using the provided CardAction.
     *
     * @param {DialogContext} _dc Current DialogContext.
     * @param {CardAction} _cardAction CardAction with a valid Sign In Link.
     * @returns {Partial<Activity>} Promise representing the InvokeResponse Activity specific to this type of auth dialog.
     */
    protected abstract createOAuthInvokeResponseActivityFromCardAction(_dc: DialogContext, _cardAction: CardAction): Partial<Activity>;
    private createOAuthInvokeResponseActivityFromTitleAndConnectionName;
    private createOAuthInvokeResponseActivityFromTitleAndSignInLink;
    private static getUserToken;
}
