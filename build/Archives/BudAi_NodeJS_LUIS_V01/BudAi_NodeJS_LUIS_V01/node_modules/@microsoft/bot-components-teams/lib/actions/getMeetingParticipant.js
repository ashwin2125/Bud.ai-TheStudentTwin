"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetMeetingParticipant = void 0;
const adaptive_expressions_1 = require("adaptive-expressions");
const botbuilder_1 = require("botbuilder");
const botbuilder_dialogs_1 = require("botbuilder-dialogs");
const actionHelpers_1 = require("./actionHelpers");
/**
 * Calls `TeamsInfo.getMeetingParticipant` and sets the result to a memory property.
 */
class GetMeetingParticipant extends botbuilder_dialogs_1.Dialog {
    constructor() {
        super(...arguments);
        /**
         * Gets or sets the expression to get the value to use for meeting id.
         *
         * @default
         * =turn.activity.channelData.meeting.id
         */
        this.meetingId = new adaptive_expressions_1.StringExpression('=turn.activity.channelData.meeting.id');
        /**
         * Gets or sets the expression to get the value to use for participant id.
         *
         * @default
         * =turn.activity.from.aadObjectId
         */
        this.participantId = new adaptive_expressions_1.StringExpression('=turn.activity.from.aadObjectId');
        /**
         * Gets or sets the expression to get the value to use for tenant id.
         *
         * @default
         * =turn.activity.channelData.tenant.id
         */
        this.tenantId = new adaptive_expressions_1.StringExpression('=turn.activity.channelData.tenant.id');
    }
    getConverter(property) {
        switch (property) {
            case 'disabled':
                return new adaptive_expressions_1.BoolExpressionConverter();
            case 'property':
            case 'meetingId':
            case 'participantId':
            case 'tenantId':
                return new adaptive_expressions_1.StringExpressionConverter();
            default:
                return super.getConverter(property);
        }
    }
    /**
     * Called when the dialog is started and pushed onto the dialog stack.
     *
     * @param {DialogContext} dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param {object} _options Optional, initial information to pass to the dialog.
     * @returns {Promise<DialogTurnResult>} A promise representing the asynchronous operation.
     */
    beginDialog(dc, _options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.disabled) === null || _a === void 0 ? void 0 : _a.getValue(dc.state)) {
                return dc.endDialog();
            }
            if (dc.context.activity.channelId !== botbuilder_1.Channels.Msteams) {
                throw new Error(`${GetMeetingParticipant.$kind} works only on the Teams channel.`);
            }
            const meetingId = (0, actionHelpers_1.getValue)(dc, this.meetingId);
            const participantId = (0, actionHelpers_1.getValue)(dc, this.participantId);
            const tenantId = (0, actionHelpers_1.getValue)(dc, this.tenantId);
            if (participantId == null) {
                /**
                 * TeamsInfo.getMeetingParticipant will default to retrieving the current meeting's participant
                 * if none is provided. This could lead to unexpected results. Therefore, GetMeetingParticipant action
                 * throws an exception if the expression provided somehow maps to an invalid result.
                 */
                throw new Error(`${GetMeetingParticipant.$kind} could not determine the participant id by expression value provided. participantId is required.`);
            }
            const result = yield botbuilder_1.TeamsInfo.getMeetingParticipant(dc.context, meetingId, participantId, tenantId);
            if (this.property != null) {
                dc.state.setValue(this.property.getValue(dc.state), result);
            }
            return dc.endDialog(result);
        });
    }
    /**
     * Builds the compute Id for the dialog.
     *
     * @returns {string} A string representing the compute Id.
     */
    onComputeId() {
        var _a, _b, _c, _d, _e, _f, _g;
        return `GetMeetingParticipant[\
            ${(_a = this.meetingId) !== null && _a !== void 0 ? _a : ''},\
            ${(_c = (_b = this.participantId) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : ''},
            ${(_e = (_d = this.tenantId) === null || _d === void 0 ? void 0 : _d.toString()) !== null && _e !== void 0 ? _e : ''},\
            ${(_g = (_f = this.property) === null || _f === void 0 ? void 0 : _f.toString()) !== null && _g !== void 0 ? _g : ''}\
        ]`;
    }
}
exports.GetMeetingParticipant = GetMeetingParticipant;
/**
 * Class identifier.
 */
GetMeetingParticipant.$kind = 'Teams.GetMeetingParticipant';
//# sourceMappingURL=getMeetingParticipant.js.map