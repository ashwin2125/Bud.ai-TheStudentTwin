import { BoolExpression, EnumExpression, Expression, StringExpression } from 'adaptive-expressions';
import { Activity, AttachmentLayout } from 'botbuilder';
import { Converter, ConverterFactory, DialogConfiguration, DialogContext, DialogStateManager, DialogTurnResult, TemplateInterface } from 'botbuilder-dialogs';
import { BaseTeamsCacheInfoResponseDialog } from './baseTeamsCacheInfoResponseDialog';
export interface SendMEAttachmentsResponseConfiguration extends DialogConfiguration {
    disabled?: boolean | string | BoolExpression;
    property?: string | Expression | StringExpression;
    attachments?: TemplateInterface<Activity, DialogStateManager>;
    attachmentLayout?: string | Expression | EnumExpression<AttachmentLayout>;
}
/**
 * Send a messaging extension 'result' response when a Teams Invoke Activity is received with activity.name='composeExtension/queryLink'.
 */
export declare class SendMEAttachmentsResponse extends BaseTeamsCacheInfoResponseDialog implements SendMEAttachmentsResponseConfiguration {
    /**
     * Class identifier.
     */
    static $kind: string;
    /**
     * Gets or sets the Activity containing the Attachments to send.
     */
    attachments?: TemplateInterface<Activity, DialogStateManager>;
    /**
     * Gets or sets the Attachment Layout type for the response ('grid' or 'list').
     *
     * @default
     * list
     */
    attachmentLayout: EnumExpression<AttachmentLayout>;
    getConverter(property: keyof SendMEAttachmentsResponseConfiguration): Converter | ConverterFactory;
    /**
     * Called when the dialog is started and pushed onto the dialog stack.
     *
     * @param {DialogContext} dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param {object} _options Optional, initial information to pass to the dialog.
     * @returns {Promise<DialogTurnResult>} A promise representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, _options?: Record<string, unknown>): Promise<DialogTurnResult>;
    /**
     * Builds the compute Id for the dialog.
     *
     * @returns {string} A string representing the compute Id.
     */
    protected onComputeId(): string;
}
