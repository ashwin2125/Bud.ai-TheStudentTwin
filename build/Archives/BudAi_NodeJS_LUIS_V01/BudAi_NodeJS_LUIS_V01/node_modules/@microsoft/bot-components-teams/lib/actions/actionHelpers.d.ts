import { BotFrameworkAdapter } from 'botbuilder';
import { DialogContext } from 'botbuilder-dialogs';
import { ExpressionProperty } from 'adaptive-expressions';
/**
 * Get the value of the string expression from the Dialog Context.
 *
 * @param {DialogContext} dc A DialogContext object.
 * @param {ExpressionProperty<any>} expressionProperty The expressionProperty to use to retrieve a value from the DialogContext.
 * @returns {string} The value of the evaluated stringExpression.
 */
export declare function getValue<T>(dc: DialogContext, expressionProperty?: ExpressionProperty<T>): T | undefined;
/**
 * dc.context.adapter is typed as a BotAdapter, not containing getUserToken and getSignInLink. However, both
 * BotFrameworkAdapter and TestAdapter contain them, so we just need to make sure that dc.context.adapter contains
 * an adapter with the appropriate auth methods.
 */
export declare type HasAuthMethods = Pick<BotFrameworkAdapter, 'getUserToken' | 'getSignInLink'>;
/**
 * Type guard to assert val has required auth methods.
 *
 * @param {any} val Usually context.adapter.
 * @returns {Assertion} Asserts that val has required auth methods.
 */
export declare function testAdapterHasAuthMethods(val: unknown): val is HasAuthMethods;
/**
 * This is similar to HasAuthMethods, but purely for testing since TestAdapter does not have
 * createConnectorClient, but BotFrameworkAdapter does.
 */
export declare type HasCreateConnectorClientMethod = Pick<BotFrameworkAdapter, 'createConnectorClient'>;
/**
 * Type guard to assert val has required createConnectorClient method.
 *
 * @param {any} val Usually context.adapter.
 * @returns {Assertion} Asserts that val has required createConnectorClient method.
 */
export declare function testAdapterHasCreateConnectorClientMethod(val: unknown): val is HasCreateConnectorClientMethod;
