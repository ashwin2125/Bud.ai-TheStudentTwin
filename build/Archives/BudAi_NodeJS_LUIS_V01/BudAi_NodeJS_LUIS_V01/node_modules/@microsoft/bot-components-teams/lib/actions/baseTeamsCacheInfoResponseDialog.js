"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseTeamsCacheInfoResponseDialog = void 0;
const botbuilder_dialogs_1 = require("botbuilder-dialogs");
const adaptive_expressions_1 = require("adaptive-expressions");
const botbuilder_1 = require("botbuilder");
class BaseTeamsCacheInfoResponseDialog extends botbuilder_dialogs_1.Dialog {
    getConverter(property) {
        switch (property) {
            case 'disabled':
                return new adaptive_expressions_1.BoolExpressionConverter();
            case 'cacheType':
                return new adaptive_expressions_1.StringExpressionConverter();
            case 'cacheDuration':
                return new adaptive_expressions_1.IntExpressionConverter();
            default:
                return super.getConverter(property);
        }
    }
    static createInvokeResponseActivity(body, statusCode = botbuilder_1.StatusCodes.OK) {
        return {
            value: {
                status: statusCode,
                body: body,
            },
            type: botbuilder_1.ActivityTypes.InvokeResponse,
        };
    }
    createMessagingExtensionInvokeResponseActivity(dc, result) {
        switch (dc.context.activity.name) {
            case 'composeExtension/queryLink':
            case 'composeExtension/query':
            case 'composeExtension/selectItem':
            case 'composeExtension/querySettingsUrl':
                return BaseTeamsCacheInfoResponseDialog.createInvokeResponseActivity({
                    composeExtension: result,
                    cacheInfo: this.getCacheInfo(dc),
                });
            case 'composeExtension/submitAction':
            case 'composeExtension/fetchTask':
                return BaseTeamsCacheInfoResponseDialog.createInvokeResponseActivity({
                    composeExtension: result,
                    cacheInfo: this.getCacheInfo(dc),
                });
            default:
                throw new Error(`GetMessagingExtensionResponse Invalid activity.name: ${dc.context.activity.name}`);
        }
    }
    getCacheInfo(dc) {
        var _a, _b;
        if (this.cacheType != null && this.cacheDuration != null) {
            const cacheType = (_a = this.cacheType) === null || _a === void 0 ? void 0 : _a.getValue(dc.state);
            let cacheDuration = (_b = this.cacheDuration) === null || _b === void 0 ? void 0 : _b.getValue(dc.state);
            if (cacheDuration > 0 && cacheType != null) {
                // Valid ranges for cacheDuration are 60 < > 2592000
                cacheDuration = Math.min(Math.max(60, cacheDuration), 2592000);
                return {
                    cacheType,
                    cacheDuration,
                };
            }
        }
        return undefined;
    }
}
exports.BaseTeamsCacheInfoResponseDialog = BaseTeamsCacheInfoResponseDialog;
//# sourceMappingURL=baseTeamsCacheInfoResponseDialog.js.map